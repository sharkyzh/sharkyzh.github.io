<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sharkyzh</title>
  
  <subtitle>Code is Poetry, Poetry is Beautiful</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sharkyzh.cn/"/>
  <updated>2020-03-10T10:40:23.598Z</updated>
  <id>http://blog.sharkyzh.cn/</id>
  
  <author>
    <name>sharkyzh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos7设置supervisor开机启动</title>
    <link href="http://blog.sharkyzh.cn/post/ae315e0f.html"/>
    <id>http://blog.sharkyzh.cn/post/ae315e0f.html</id>
    <published>2018-09-21T09:43:36.000Z</published>
    <updated>2020-03-10T10:40:23.598Z</updated>
    
    <content type="html"><![CDATA[<h5 id="新建文件supervisord-service"><a href="#新建文件supervisord-service" class="headerlink" title="新建文件supervisord.service"></a>新建文件supervisord.service</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#supervisord.service</span><br><span class="line"></span><br><span class="line">[Unit] </span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[Service] </span><br><span class="line">Type=forking </span><br><span class="line">ExecStart=/usr/bin/supervisord -c /etc/supervisord.conf </span><br><span class="line">ExecStop=/usr/bin/supervisorctl shutdown </span><br><span class="line">ExecReload=/usr/bin/supervisorctl reload </span><br><span class="line">KillMode=process </span><br><span class="line">Restart=on-failure </span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install] </span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>将文件拷贝到/usr/lib/systemd/system/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp supervisord.service /usr/lib/systemd/system/</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable supervisord</span><br></pre></td></tr></table></figure><p>验证一下是否为开机启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled supervisord</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;新建文件supervisord-service&quot;&gt;&lt;a href=&quot;#新建文件supervisord-service&quot; class=&quot;headerlink&quot; title=&quot;新建文件supervisord.service&quot;&gt;&lt;/a&gt;新建文件supervisord.s
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.sharkyzh.cn/categories/linux/"/>
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/categories/linux/centos/"/>
    
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/tags/centos/"/>
    
      <category term="linux" scheme="http://blog.sharkyzh.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ngrok配置supervisor进程守护</title>
    <link href="http://blog.sharkyzh.cn/post/7ded41a5.html"/>
    <id>http://blog.sharkyzh.cn/post/7ded41a5.html</id>
    <published>2018-09-21T09:37:58.000Z</published>
    <updated>2020-03-10T10:40:23.599Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h5><p>可以参考我的博客里的安装教程</p><p><a href="https://blog.sharkyzh.cn/post/b8744e3e.html">传送门</a></p><p>这里就不细说了</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[program:ngrokd]</span><br><span class="line">command = /usr/ngrok/bin/ngrokd -domain=&quot;tunnel.51ngrok.cn&quot; -httpAddr=&quot;:8080&quot; -httpsAddr=&quot;:8081&quot; -tlsKey=&quot;/usr/ngrok/bin/51ngrok.key&quot; -tlsCrt=&quot;/usr/ngrok/bin/51ngrok.crt&quot;</span><br><span class="line">directory = /usr/ngrok/bin</span><br><span class="line">process_name = %(program_name)s_%(process_num)s</span><br><span class="line">numprocs = 1 ;注意这里只能为1</span><br><span class="line">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true   ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class="line">user = root          ; 用哪个用户启动</span><br><span class="line">stdout_logfile=/logs/ngroklog/ngrok.out.log</span><br><span class="line">stdout_logfile_maxbytes = 10MB</span><br><span class="line">stderr_logfile=/logs/ngroklog/ngrok.err.log</span><br><span class="line">stderr_logfile_maxbytes = 10MB</span><br></pre></td></tr></table></figure><p>碰到的坑</p><p>1、指定证书文件启动时，报错提示 51ngrok.key路径找不到路径</p><p>解决办法：证书用完整路径</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;安装supervisor&quot;&gt;&lt;a href=&quot;#安装supervisor&quot; class=&quot;headerlink&quot; title=&quot;安装supervisor&quot;&gt;&lt;/a&gt;安装supervisor&lt;/h5&gt;&lt;p&gt;可以参考我的博客里的安装教程&lt;/p&gt;
&lt;p&gt;&lt;a href=
      
    
    </summary>
    
      <category term="ngrok" scheme="http://blog.sharkyzh.cn/categories/ngrok/"/>
    
    
      <category term="ngrok" scheme="http://blog.sharkyzh.cn/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title>Linux新增磁盘、分区、格式化和自动挂载</title>
    <link href="http://blog.sharkyzh.cn/post/bf5cf99.html"/>
    <id>http://blog.sharkyzh.cn/post/bf5cf99.html</id>
    <published>2018-09-21T07:15:47.000Z</published>
    <updated>2020-03-10T10:40:23.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux新增磁盘、分区、格式化和自动挂载"><a href="#Linux新增磁盘、分区、格式化和自动挂载" class="headerlink" title="Linux新增磁盘、分区、格式化和自动挂载"></a>Linux新增磁盘、分区、格式化和自动挂载</h3><p>系统环境：CentOS7 64位 mini版<br>场景：在虚拟机中添加一块40G的SCSI硬盘，分成一个扩展分区，格式化为ext3文件格式，挂载到/opt目录上</p><h4 id="1-查看磁盘信息"><a href="#1-查看磁盘信息" class="headerlink" title="1. 查看磁盘信息"></a>1. 查看磁盘信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><h4 id="2-分区"><a href="#2-分区" class="headerlink" title="2. 分区"></a>2. 分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure><p>执行上述命令后，根据提示对磁盘进行分区。注意：下边操作提示的红色字体表示输入的指令</p><p>1&gt; 命令(输入 m 获取帮助)： m</p><p>分区命令列表</p><p>2&gt; 添加新的分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：n</span><br></pre></td></tr></table></figure> <a id="more"></a><p>3&gt; 选择分区类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Partition type: </span><br><span class="line">p primary (0 primary, 0 extended, 4 free) </span><br><span class="line">e extended </span><br><span class="line">Select (default p): e </span><br><span class="line">输入e表示创建扩展分区</span><br></pre></td></tr></table></figure><p>4&gt; 分区数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分区号 (1-4，默认 1)：1</span><br></pre></td></tr></table></figure><p>5&gt; 设置扇区</p><p>起始 扇区 (2048-83886079，默认为 2048)：回车<br>Last 扇区, +扇区 or +size{K,M,G} (2048-83886079，默认为 83886079)：回车</p><p>6&gt; 保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令(输入 m 获取帮助)：w</span><br></pre></td></tr></table></figure><p>完整操作流程如下图所示：<br>操作流程</p><h4 id="3-格式化分区"><a href="#3-格式化分区" class="headerlink" title="3. 格式化分区"></a>3. 格式化分区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t ext3 /dev/sdb</span><br></pre></td></tr></table></figure><p>分区<br>最后提示：<br>Writing superblocks and filesystem accounting information: 回车</p><h4 id="4-挂载磁盘"><a href="#4-挂载磁盘" class="headerlink" title="4.挂载磁盘"></a>4.挂载磁盘</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdb /opt</span><br></pre></td></tr></table></figure><p>这种方式只临时挂载到/opt目录下，下次开机时不会自动挂载<br>注意：挂载后/opt目录下的文件会被临时删除，注意备份</p><h4 id="5-开机自动挂载"><a href="#5-开机自动挂载" class="headerlink" title="5.开机自动挂载"></a>5.开机自动挂载</h4><p>编辑/etc/fstab文件，在文件中添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb /opt ext3 defaults 1 1</span><br></pre></td></tr></table></figure><p>下回系统重启之后就会自动将/dev/sdb磁盘挂载到/opt目录下了。可以通过mount命令查看文件系统的挂载情况，如下图所示：<br>设备挂载情况</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Linux新增磁盘、分区、格式化和自动挂载&quot;&gt;&lt;a href=&quot;#Linux新增磁盘、分区、格式化和自动挂载&quot; class=&quot;headerlink&quot; title=&quot;Linux新增磁盘、分区、格式化和自动挂载&quot;&gt;&lt;/a&gt;Linux新增磁盘、分区、格式化和自动挂载&lt;/h3&gt;&lt;p&gt;系统环境：CentOS7 64位 mini版&lt;br&gt;场景：在虚拟机中添加一块40G的SCSI硬盘，分成一个扩展分区，格式化为ext3文件格式，挂载到/opt目录上&lt;/p&gt;
&lt;h4 id=&quot;1-查看磁盘信息&quot;&gt;&lt;a href=&quot;#1-查看磁盘信息&quot; class=&quot;headerlink&quot; title=&quot;1. 查看磁盘信息&quot;&gt;&lt;/a&gt;1. 查看磁盘信息&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lsblk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-分区&quot;&gt;&lt;a href=&quot;#2-分区&quot; class=&quot;headerlink&quot; title=&quot;2. 分区&quot;&gt;&lt;/a&gt;2. 分区&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fdisk /dev/sdb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行上述命令后，根据提示对磁盘进行分区。注意：下边操作提示的红色字体表示输入的指令&lt;/p&gt;
&lt;p&gt;1&amp;gt; 命令(输入 m 获取帮助)： m&lt;/p&gt;
&lt;p&gt;分区命令列表&lt;/p&gt;
&lt;p&gt;2&amp;gt; 添加新的分区&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;命令(输入 m 获取帮助)：n&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/categories/centos/"/>
    
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Centos7下Erlang20.2安装部署</title>
    <link href="http://blog.sharkyzh.cn/post/3909ad56.html"/>
    <id>http://blog.sharkyzh.cn/post/3909ad56.html</id>
    <published>2018-09-21T06:22:49.000Z</published>
    <updated>2020-03-10T10:40:23.590Z</updated>
    
    <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>本篇文章适用范围？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Erlang 17.0+</span><br><span class="line">CentOS 7</span><br></pre></td></tr></table></figure><p>环境信息?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CentOS 7.X</span><br><span class="line">Erlang 20.2</span><br></pre></td></tr></table></figure><h5 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h5><p>安装Erlang编译安装必要依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#安装必要依赖</span><br><span class="line">sudo yum install -y gcc gcc-c++ glibc-devel make ncurses-devel openssl-devel autoconf java-1.8.0-openjdk-devel git</span><br></pre></td></tr></table></figure><p>下载Erlang源码<br>下载地址：<a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">https://www.erlang.org/downloads</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#进入下载目录</span><br><span class="line">cd /home/download</span><br><span class="line">#下载</span><br><span class="line">wget http://erlang.org/download/otp_src_20.2.tar.gz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf otp_src_20.2.tar.gz</span><br></pre></td></tr></table></figure> <a id="more"></a><p>编译&amp;安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#进入根目录</span><br><span class="line">cd otp_src_20.2.tar.gz</span><br><span class="line">#编译&amp;安装</span><br><span class="line">./otp_build autoconf</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#进入erlang命令行表示成功</span><br><span class="line">erl</span><br></pre></td></tr></table></figure><h5 id="YUM安装"><a href="#YUM安装" class="headerlink" title="YUM安装"></a>YUM安装</h5><p>创建Yum源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#创建yum源</span><br><span class="line">sudo vi /etc/yum.repos.d/rabbitmq-erlang.repo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#文件内容</span><br><span class="line">[rabbitmq-erlang]</span><br><span class="line">name=rabbitmq-erlang</span><br><span class="line">baseurl=https://dl.bintray.com/rabbitmq/rpm/erlang/20/el/7</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">安装</span><br><span class="line">sudo yum install -y erlang</span><br><span class="line">验证</span><br><span class="line">#进入erlang命令行表示成功</span><br><span class="line">erl</span><br></pre></td></tr></table></figure><h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><blockquote><p><a href="https://github.com/erlang/otp/blob/maint/HOWTO/INSTALL.md" target="_blank" rel="noopener">https://github.com/erlang/otp/blob/maint/HOWTO/INSTALL.md</a></p><p><a href="https://github.com/rabbitmq/erlang-rpm" target="_blank" rel="noopener">https://github.com/rabbitmq/erlang-rpm</a></p><p><a href="https://zfanw.com/blog/install-erlang-on-centos-7.html" target="_blank" rel="noopener">https://zfanw.com/blog/install-erlang-on-centos-7.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;本篇文章适用范围？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Erlang 17.0+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CentOS 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;环境信息?&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CentOS 7.X&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Erlang 20.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;编译安装&quot;&gt;&lt;a href=&quot;#编译安装&quot; class=&quot;headerlink&quot; title=&quot;编译安装&quot;&gt;&lt;/a&gt;编译安装&lt;/h5&gt;&lt;p&gt;安装Erlang编译安装必要依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#安装必要依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install -y gcc gcc-c++ glibc-devel make ncurses-devel openssl-devel autoconf java-1.8.0-openjdk-devel git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下载Erlang源码&lt;br&gt;下载地址：&lt;a href=&quot;https://www.erlang.org/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.erlang.org/downloads&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#进入下载目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /home/download&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#下载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http://erlang.org/download/otp_src_20.2.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -zvxf otp_src_20.2.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/categories/centos/"/>
    
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装与配置supervisor</title>
    <link href="http://blog.sharkyzh.cn/post/b8744e3e.html"/>
    <id>http://blog.sharkyzh.cn/post/b8744e3e.html</id>
    <published>2018-09-21T06:22:49.000Z</published>
    <updated>2020-03-10T10:40:23.590Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools</span><br><span class="line">easy_install supervisor</span><br><span class="line">#或者是</span><br><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><blockquote><p>supervisor安装完成后会生成三个执行程序：supervisortd、supervisorctl、echo_supervisord_conf，分别是supervisor的守护进程服务（用于接收进程管理命令）、客户端（用于和守护进程通信，发送管理进程的指令）、生成初始配置文件程序。</p></blockquote><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>输出supervisor配置，可以使用echo_supervisord_conf,我们将其重定向到文件中，然后就可以修改其配置项了。<br>运行supervisord服务的时候，需要指定supervisor配置文件，如果没有显示指定，默认在以下目录查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">###$CWD表示运行supervisord程序的目录。</span><br><span class="line">$CWD/supervisord.conf </span><br><span class="line">$CWD/etc/supervisord.conf</span><br><span class="line">/etc/supervisord.conf</span><br><span class="line">/etc/supervisor/supervisord.conf (since Supervisor 3.3.0)</span><br><span class="line">../etc/supervisord.conf (Relative to the executable)</span><br><span class="line">../supervisord.conf (Relative to the executable)</span><br></pre></td></tr></table></figure><p>我们将其重定向到/etc/目录下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure> <a id="more"></a><p>1、配置文件参数说明<br>supervisor的配置参数较多，下面介绍一下常用的参数配置，详细的配置及说明，请参考官方文档介绍。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">注：分号（;）开头的配置表示注释</span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class="line">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class="line">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ;登录管理后台的用户名</span><br><span class="line">;password=123               ;登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class="line">nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 ;可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class="line"></span><br><span class="line">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class="line">[program:xx]</span><br><span class="line">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class="line">autostart=true       ; 在supervisord启动的时候也自动启动</span><br><span class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class="line">autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class="line">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class="line">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class="line">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class="line">redirect_stderr=true ; 把stderr重定向到stdout，默认false</span><br><span class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class="line">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class="line">stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class="line">killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程</span><br><span class="line"></span><br><span class="line">;包含其它配置文件,一般情况下，我们会新建一个目录来专门存放服务的配置文件，然后在此文件中将其include包含进来。</span><br><span class="line">[include]</span><br><span class="line">files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</span><br></pre></td></tr></table></figure><p>2、配置管理进程<br>进程管理配置参数，不建议全都写在supervisord.conf文件中，应该每个进程写一个配置文件放在include指定的目录下包含进supervisord.conf文件中。<br>（1）创建/etc/supervisor/config.d目录，用于存放进程管理的配置文件<br>（2）修改/etc/supervisor/supervisord.conf中的include参数，将/etc/supervisor/conf.d目录添加到include中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/config.d/*.ini</span><br></pre></td></tr></table></figure><p>3、服务配置模板</p><p>###项目名称（program_name是唯一不可重复的，用来唯一标识一个服务）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:program_name]</span><br><span class="line">###命令要能运行在前台，如果命令加入&amp;符号，例如&quot;ping 127.0.0.1 &amp;&quot;命令就不能被supervisor来进行监控。</span><br><span class="line">command=php /home/wwwroot/site.webshowu.com/artisan queue:work redis --sleep=3 --tries=3 --daemon</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=root</span><br><span class="line">numprocs=3</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/home/wwwlogs/worker1.log</span><br></pre></td></tr></table></figure><p>这些配置项的含义已经在上面的配置文件说明中详细说明。<br>下面是配置dotnet api进程的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[program:webapi]</span><br><span class="line">command=dotnet zh_Api.dll</span><br><span class="line">directory=/www/wwwroot/api.sharkyzh.fun</span><br><span class="line">environment=ASPNETCORE__ENVIRONMENT=Production #环境变量</span><br><span class="line">user=root</span><br><span class="line">stopsignal=INT</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=3</span><br><span class="line">stderr_logfile=/wwwlogs/apilogs/api.err.log</span><br><span class="line">stdout_logfile=/wwwlogs/apilogs/api.out.log</span><br></pre></td></tr></table></figure><p>4、web管理配置说明<br>编辑配置文件/etc/supervisor/supervisord.conf,在最后面加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=0.0.0.0:9001          ; (ip_address:port specifier, *:port for all iface)</span><br><span class="line">username=user              ; 用户名 (default is no username (open server))</span><br><span class="line">password=123               ; 密码 (default is no password (open server))</span><br></pre></td></tr></table></figure><p>此时访问本机的9001端口，输入用户名密码即可进入此管理页面</p><p>三、启动与关闭supervisor和其管理的项目<br>1、启动supervisor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##-c制定让其读取的配置文件</span><br><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure><p>2、关闭supervisor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl shutdown</span><br></pre></td></tr></table></figure><p>3、重新载入supervisor，在这里相当于重启supervisor服务，里面的服务也会跟着重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure><p>4、添加/删除 要管理服务<br>（1）添加或删除配置文件<br>（2）更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><p>5、管理supervisor下的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">###启动服务</span><br><span class="line">supervisorctl start all</span><br><span class="line">supervisorctl start service_name</span><br><span class="line">###关闭服务</span><br><span class="line">supervisorctl stop all</span><br><span class="line">supervisorctl stop service_name</span><br><span class="line">###查看状态</span><br><span class="line">supervisorctl status [service_name]</span><br><span class="line">###重新启动所有服务或者是某个服务</span><br><span class="line">supervisorctl restart all</span><br><span class="line">supervisorctl restart service_name</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install python-setuptools&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;easy_install supervisor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#或者是&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install supervisor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;supervisor安装完成后会生成三个执行程序：supervisortd、supervisorctl、echo_supervisord_conf，分别是supervisor的守护进程服务（用于接收进程管理命令）、客户端（用于和守护进程通信，发送管理进程的指令）、生成初始配置文件程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;p&gt;输出supervisor配置，可以使用echo_supervisord_conf,我们将其重定向到文件中，然后就可以修改其配置项了。&lt;br&gt;运行supervisord服务的时候，需要指定supervisor配置文件，如果没有显示指定，默认在以下目录查找：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;###$CWD表示运行supervisord程序的目录。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$CWD/supervisord.conf &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$CWD/etc/supervisord.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/supervisord.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/etc/supervisor/supervisord.conf (since Supervisor 3.3.0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../etc/supervisord.conf (Relative to the executable)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;../supervisord.conf (Relative to the executable)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将其重定向到/etc/目录下面&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir /etc/supervisor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo_supervisord_conf &amp;gt; /etc/supervisor/supervisord.conf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/categories/centos/"/>
    
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>MVC路由调试工具-RouteDebugger</title>
    <link href="http://blog.sharkyzh.cn/post/2e35e381.html"/>
    <id>http://blog.sharkyzh.cn/post/2e35e381.html</id>
    <published>2018-06-28T03:55:05.000Z</published>
    <updated>2020-03-10T10:40:23.594Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-获取方式"><a href="#1-获取方式" class="headerlink" title="1.获取方式"></a>1.获取方式</h4><h4 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h4><p>在程序包控制台中执行命令:</p><pre><code>Install-Package routedebugger</code></pre><p>安装成功后Web.config文件中会自动加入行</p><pre><code>&lt;add key=&quot;RouteDebugger:Enabled&quot; value=&quot;true&quot; /&gt;</code></pre><h5 id="第二种方法："><a href="#第二种方法：" class="headerlink" title="第二种方法："></a>第二种方法：</h5><p>下载之后，解压之后得到RouteDebugger.dll，引用到web项目中。<br>手动在web.config中加入</p><pre><code>&lt;add key=&quot;RouteDebugger:Enabled&quot; value=&quot;true&quot; /&gt;</code></pre><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><h5 id="1-对于-NET3-5和MVC3之前的项目，如果要使用RouteDebugger，还需要在Application-Start中注册。"><a href="#1-对于-NET3-5和MVC3之前的项目，如果要使用RouteDebugger，还需要在Application-Start中注册。" class="headerlink" title="1.对于.NET3.5和MVC3之前的项目，如果要使用RouteDebugger，还需要在Application_Start中注册。"></a>1.对于.NET3.5和MVC3之前的项目，如果要使用RouteDebugger，还需要在Application_Start中注册。</h5><pre><code>protected void Application_Start(object sender, EventArgs e) {   RegisterRoutes(RouteTable.Routes);   RouteDebug.RouteDebugger.RewriteRoutesForTesting(RouteTable.Routes);}</code></pre><p>如果是MVC3、MVC4、MVC5，则无需在Application_Start中注册。</p><h5 id="2-做完上述工作后，访问页面即可以跟踪到路由。"><a href="#2-做完上述工作后，访问页面即可以跟踪到路由。" class="headerlink" title="2.做完上述工作后，访问页面即可以跟踪到路由。"></a>2.做完上述工作后，访问页面即可以跟踪到路由。</h5><h5 id="3-禁用-启用"><a href="#3-禁用-启用" class="headerlink" title="3.禁用/启用"></a>3.禁用/启用</h5><p>在web.config中操作按照下面的配置节进行修改</p><pre><code>&lt;!--禁用--&gt;&lt;add key=&quot;RouteDebugger:Enabled&quot; value=&quot;false&quot; /&gt;&lt;!--启用--&gt;&lt;add key=&quot;RouteDebugger:Enabled&quot; value=&quot;true&quot; /&gt;</code></pre><h5 id="4-使用效果图："><a href="#4-使用效果图：" class="headerlink" title="4.使用效果图："></a>4.使用效果图：</h5><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fqk3i4ts5hj20zl0rd3zt.jpg" alt="routeDebugger"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-获取方式&quot;&gt;&lt;a href=&quot;#1-获取方式&quot; class=&quot;headerlink&quot; title=&quot;1.获取方式&quot;&gt;&lt;/a&gt;1.获取方式&lt;/h4&gt;&lt;h4 id=&quot;第一种方法：&quot;&gt;&lt;a href=&quot;#第一种方法：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/categories/net/"/>
    
      <category term="mvc" scheme="http://blog.sharkyzh.cn/categories/net/mvc/"/>
    
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/tags/net/"/>
    
      <category term="mvc" scheme="http://blog.sharkyzh.cn/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>EF CodeFirst使用介绍</title>
    <link href="http://blog.sharkyzh.cn/post/c566f6d0.html"/>
    <id>http://blog.sharkyzh.cn/post/c566f6d0.html</id>
    <published>2018-06-28T03:51:49.000Z</published>
    <updated>2020-03-10T10:40:23.591Z</updated>
    
    <content type="html"><![CDATA[<h4 id="EF简单DataAnnotations实体配置"><a href="#EF简单DataAnnotations实体配置" class="headerlink" title="EF简单DataAnnotations实体配置"></a>EF简单DataAnnotations实体配置</h4><ol><li>数据库创建表T_Persons，有Id（主键，自动增长）、Name、CreateTime字段</li><li>创建Person类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Table(&quot;T_Persons&quot;)]//因为类名和表名不一样，所以要使用Table标注</span><br><span class="line">public class Person</span><br><span class="line">&#123;</span><br><span class="line">    public long Id&#123;get;set;&#125;</span><br><span class="line">    public string Name&#123;get;set;&#125;</span><br><span class="line">    public DateTime CreteTime&#123;get;set;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为EF约定主键名是Id，所以不用再特殊指定Id是主键，如果非要指定就使用[key]。<br>因为字段名字和属性名字一致，所以不用再特殊指定属性和字段名的对应关系，如果需要特殊指定，则要用[Column(“Name”)]。<br>（*）必填字段标注[Required]、字段长度[MaxLength(5)]、可空字段用int?、如果字段在数据库有默认值，则要在属性上标注[DatabaseGenerated]。<br>注意实体类都要写成public，负责后面可能会有麻烦。</p><ol><li>创建DbContext类（模型类、实体类）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MyDbContext:DbContext</span><br><span class="line">&#123;</span><br><span class="line">    public MyDbContext():base(&quot;name=conn1&quot;)</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DbSet&lt;Person&gt; Persons&#123;get;set;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;EF简单DataAnnotations实体配置&quot;&gt;&lt;a href=&quot;#EF简单DataAnnotations实体配置&quot; class=&quot;headerlink&quot; title=&quot;EF简单DataAnnotations实体配置&quot;&gt;&lt;/a&gt;EF简单DataAnnotatio
      
    
    </summary>
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/categories/net/"/>
    
      <category term="mvc" scheme="http://blog.sharkyzh.cn/categories/net/mvc/"/>
    
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/tags/net/"/>
    
      <category term="mvc" scheme="http://blog.sharkyzh.cn/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ简单使用教程</title>
    <link href="http://blog.sharkyzh.cn/post/e62ed69c.html"/>
    <id>http://blog.sharkyzh.cn/post/e62ed69c.html</id>
    <published>2018-06-28T00:20:17.000Z</published>
    <updated>2020-03-10T10:40:23.595Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最简单的使用"><a href="#最简单的使用" class="headerlink" title="最简单的使用"></a>最简单的使用</h4><h5 id="1、-引用-rabbitMQ-Client"><a href="#1、-引用-rabbitMQ-Client" class="headerlink" title="1、 引用 rabbitMQ.Client"></a>1、 引用 rabbitMQ.Client</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package RabbitMQ.Client</span><br></pre></td></tr></table></figure><h5 id="2、-创建生产者"><a href="#2、-创建生产者" class="headerlink" title="2、 创建生产者"></a>2、 创建生产者</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">ConnectionFactory factory = new ConnectionFactory</span><br><span class="line">&#123;</span><br><span class="line">    UserName = &quot;mqAdmin&quot;,//用户名</span><br><span class="line">    Password = &quot;mqAdmin&quot;,//密码</span><br><span class="line">    HostName = &quot;192.168.1.103&quot;//rabbitmq ip</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//创建连接</span><br><span class="line">var connection = factory.CreateConnection();</span><br><span class="line">//创建通道</span><br><span class="line">var channel = connection.CreateModel();</span><br><span class="line">//声明一个队列</span><br><span class="line">channel.QueueDeclare(&quot;hello&quot;, false, false, false, null);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;\nRabbitMQ连接成功，请输入消息，输入exit退出！&quot;);</span><br><span class="line"></span><br><span class="line">string input;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    input = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">    var sendBytes = Encoding.UTF8.GetBytes(input);</span><br><span class="line">    //发布消息</span><br><span class="line">    channel.BasicPublish(&quot;&quot;, &quot;hello&quot;, null, sendBytes);</span><br><span class="line"></span><br><span class="line">&#125; while (input.Trim().ToLower()!=&quot;exit&quot;);</span><br><span class="line">channel.Close();</span><br><span class="line">connection.Close();</span><br></pre></td></tr></table></figure><h5 id="3、-创建生产者"><a href="#3、-创建生产者" class="headerlink" title="3、 创建生产者"></a>3、 创建生产者</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//创建连接工厂</span><br><span class="line">ConnectionFactory factory = new ConnectionFactory</span><br><span class="line">&#123;</span><br><span class="line">    UserName = &quot;admin&quot;,//用户名</span><br><span class="line">    Password = &quot;admin&quot;,//密码</span><br><span class="line">    HostName = &quot;192.168.157.130&quot;//rabbitmq ip</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//创建连接</span><br><span class="line">var connection = factory.CreateConnection();</span><br><span class="line">//创建通道</span><br><span class="line">var channel = connection.CreateModel();</span><br><span class="line"></span><br><span class="line">//事件基本消费者</span><br><span class="line">EventingBasicConsumer consumer = new EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">//接收到消息事件</span><br><span class="line">consumer.Received += (ch, ea) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var message = Encoding.UTF8.GetString(ea.Body);</span><br><span class="line">    Console.WriteLine($&quot;收到消息： &#123;message&#125;&quot;);</span><br><span class="line">    //确认该消息已被消费</span><br><span class="line">    channel.BasicAck(ea.DeliveryTag, false);</span><br><span class="line">&#125;;</span><br><span class="line">//启动消费者 设置为手动应答消息</span><br><span class="line">channel.BasicConsume(&quot;hello&quot;, false, consumer);</span><br><span class="line">Console.WriteLine(&quot;消费者已启动&quot;);</span><br><span class="line">Console.ReadKey();</span><br><span class="line">channel.Dispose();</span><br><span class="line">connection.Close();</span><br></pre></td></tr></table></figure> <a id="more"></a><h4 id="RabbitMQ消费失败的处理"><a href="#RabbitMQ消费失败的处理" class="headerlink" title="RabbitMQ消费失败的处理"></a>RabbitMQ消费失败的处理</h4><p>RabbitMQ采用消息应答机制，即消费者收到一个消息之后，需要发送一个应答，然后RabbitMQ才会将这个消息从队列中删除，如果消费者在消费过程中出现异常，断开连接切没有发送应答，那么RabbitMQ会将这个消息重新投递。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//接收到消息事件</span><br><span class="line">consumer.Received += (ch, ea) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    var message = Encoding.UTF8.GetString(ea.Body);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine($&quot;收到消息： &#123;message&#125;&quot;);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine($&quot;收到该消息[&#123;ea.DeliveryTag&#125;] 延迟10s发送回执&quot;);</span><br><span class="line">    Thread.Sleep(10000);</span><br><span class="line">    //确认该消息已被消费</span><br><span class="line">    channel.BasicAck(ea.DeliveryTag, false);</span><br><span class="line">    Console.WriteLine($&quot;已发送回执[&#123;ea.DeliveryTag&#125;]&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用RabbitMQ的Exchange"><a href="#使用RabbitMQ的Exchange" class="headerlink" title="使用RabbitMQ的Exchange"></a>使用RabbitMQ的Exchange</h4><p>前面我们可以看到生产者将消息投递到Queue中，实际上这在RabbitMQ中这种事情永远都不会发生。实际的情况是，生产者将消息发送到Exchange（交换器），由Exchange将消息路由到一个或多个Queue中（或者丢弃）</p><p>AMQP协议中的核心思想就是生产者和消费者隔离，生产者从不直接将消息发送给队列。生产者通常不知道是否一个消息会被发送到队列中，只是将消息发送到一个交换机。先由Exchange来接收，然后Exchange按照特定的策略转发到Queue进行存储。同理，消费者也是如此。Exchange 就类似于一个交换机，转发各个消息分发到相应的队列中。</p><p>RabbitMQ提供了四种Exchange模式：direct,fanout,topic,header 。但是 header模式在实际使用中较少，所以这里只介绍前三种模式。</p><blockquote><p>Exchange不是消费者关心的，所以消费者的代码完全不用变，用上面的消费者就行了。</p></blockquote><h5 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h5><p>所有发送到Direct Exchange的消息被转发到具有指定RouteKey的Queue。</p><p>Direct模式,可以使用rabbitMQ自带的Exchange：default Exchange 。所以不需要将Exchange进行任何绑定(binding)操作 。消息传递时，RouteKey必须完全匹配，才会被队列接收，否则该消息会被抛弃。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//创建连接</span><br><span class="line">var connection = factory.CreateConnection();</span><br><span class="line">//创建通道</span><br><span class="line">var channel = connection.CreateModel();</span><br><span class="line"></span><br><span class="line">//定义一个Direct类型交换机</span><br><span class="line">channel.ExchangeDeclare(exchangeName, ExchangeType.Direct, false, false, null);</span><br><span class="line"></span><br><span class="line">//定义一个队列</span><br><span class="line">channel.QueueDeclare(queueName, false, false, false, null);</span><br><span class="line"></span><br><span class="line">//将队列绑定到交换机</span><br><span class="line">channel.QueueBind(queueName, exchangeName, routeKey, null);</span><br></pre></td></tr></table></figure><h5 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h5><p>所有发送到Fanout Exchange的消息都会被转发到与该Exchange 绑定(Binding)的所有Queue上。</p><p>Fanout Exchange 不需要处理RouteKey 。只需要简单的将队列绑定到exchange 上。这样发送到exchange的消息都会被转发到与该交换机绑定的所有队列上。类似子网广播，每台子网内的主机都获得了一份复制的消息。</p><p>所以，Fanout Exchange 转发消息是最快的。</p><p>为了演示效果，定义了两个队列，分别为hello1，hello2，每个队列都拥有一个消费者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    string exchangeName = &quot;TestFanoutChange&quot;;</span><br><span class="line">    string queueName1 = &quot;hello1&quot;;</span><br><span class="line">    string queueName2 = &quot;hello2&quot;;</span><br><span class="line">    string routeKey = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    //创建连接工厂</span><br><span class="line">    ConnectionFactory factory = new ConnectionFactory</span><br><span class="line">    &#123;</span><br><span class="line">        UserName = &quot;admin&quot;,//用户名</span><br><span class="line">        Password = &quot;admin&quot;,//密码</span><br><span class="line">        HostName = &quot;192.168.157.130&quot;//rabbitmq ip</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //创建连接</span><br><span class="line">    var connection = factory.CreateConnection();</span><br><span class="line">    //创建通道</span><br><span class="line">    var channel = connection.CreateModel();</span><br><span class="line"></span><br><span class="line">    //定义一个Direct类型交换机</span><br><span class="line">    channel.ExchangeDeclare(exchangeName, ExchangeType.Fanout, false, false, null);</span><br><span class="line"></span><br><span class="line">    //定义队列1</span><br><span class="line">    channel.QueueDeclare(queueName1, false, false, false, null);</span><br><span class="line">    //定义队列2</span><br><span class="line">    channel.QueueDeclare(queueName2, false, false, false, null);</span><br><span class="line"></span><br><span class="line">    //将队列绑定到交换机</span><br><span class="line">    channel.QueueBind(queueName1, exchangeName, routeKey, null);</span><br><span class="line">    channel.QueueBind(queueName2, exchangeName, routeKey, null);</span><br><span class="line"></span><br><span class="line">    //生成两个队列的消费者</span><br><span class="line">    ConsumerGenerator(queueName1);</span><br><span class="line">    ConsumerGenerator(queueName2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Console.WriteLine($&quot;\nRabbitMQ连接成功，\n\n请输入消息，输入exit退出！&quot;);</span><br><span class="line"></span><br><span class="line">    string input;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        input = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        var sendBytes = Encoding.UTF8.GetBytes(input);</span><br><span class="line">        //发布消息</span><br><span class="line">        channel.BasicPublish(exchangeName, routeKey, null, sendBytes);</span><br><span class="line"></span><br><span class="line">    &#125; while (input.Trim().ToLower() != &quot;exit&quot;);</span><br><span class="line">    channel.Close();</span><br><span class="line">    connection.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 根据队列名称生成消费者</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;queueName&quot;&gt;&lt;/param&gt;</span><br><span class="line">static void ConsumerGenerator(string queueName)</span><br><span class="line">&#123;</span><br><span class="line">    //创建连接工厂</span><br><span class="line">    ConnectionFactory factory = new ConnectionFactory</span><br><span class="line">    &#123;</span><br><span class="line">        UserName = &quot;admin&quot;,//用户名</span><br><span class="line">        Password = &quot;admin&quot;,//密码</span><br><span class="line">        HostName = &quot;192.168.157.130&quot;//rabbitmq ip</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //创建连接</span><br><span class="line">    var connection = factory.CreateConnection();</span><br><span class="line">    //创建通道</span><br><span class="line">    var channel = connection.CreateModel();</span><br><span class="line"></span><br><span class="line">    //事件基本消费者</span><br><span class="line">    EventingBasicConsumer consumer = new EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">    //接收到消息事件</span><br><span class="line">    consumer.Received += (ch, ea) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        var message = Encoding.UTF8.GetString(ea.Body);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine($&quot;Queue:&#123;queueName&#125;收到消息： &#123;message&#125;&quot;);</span><br><span class="line">        //确认该消息已被消费</span><br><span class="line">        channel.BasicAck(ea.DeliveryTag, false);</span><br><span class="line">    &#125;;</span><br><span class="line">    //启动消费者 设置为手动应答消息</span><br><span class="line">    channel.BasicConsume(queueName, false, consumer);</span><br><span class="line">    Console.WriteLine($&quot;Queue:&#123;queueName&#125;，消费者已启动&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">所有发送到Topic Exchange的消息被转发到能和Topic匹配的Queue上，</span><br><span class="line"></span><br><span class="line">Exchange 将路由进行模糊匹配。可以使用通配符进行模糊匹配，符号“#”匹配一个或多个词，符号“”匹配不多不少一个词。因此“XiaoChen.#”能够匹配到“XiaoChen.pets.cat”，但是“XiaoChen.” 只会匹配到“XiaoChen.money”。</span><br><span class="line"></span><br><span class="line">所以，Topic Exchange 使用非常灵活。</span><br><span class="line"></span><br><span class="line">string exchangeName = &quot;TestTopicChange&quot;;</span><br><span class="line">string queueName = &quot;hello&quot;;</span><br><span class="line">string routeKey = &quot;TestRouteKey.*&quot;;</span><br><span class="line"></span><br><span class="line">//创建连接工厂</span><br><span class="line">ConnectionFactory factory = new ConnectionFactory</span><br><span class="line">&#123;</span><br><span class="line">    UserName = &quot;admin&quot;,//用户名</span><br><span class="line">    Password = &quot;admin&quot;,//密码</span><br><span class="line">    HostName = &quot;192.168.157.130&quot;//rabbitmq ip</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//创建连接</span><br><span class="line">var connection = factory.CreateConnection();</span><br><span class="line">//创建通道</span><br><span class="line">var channel = connection.CreateModel();</span><br><span class="line"></span><br><span class="line">//定义一个Direct类型交换机</span><br><span class="line">channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, false, false, null);</span><br><span class="line"></span><br><span class="line">//定义队列1</span><br><span class="line">channel.QueueDeclare(queueName, false, false, false, null);</span><br><span class="line"></span><br><span class="line">//将队列绑定到交换机</span><br><span class="line">channel.QueueBind(queueName, exchangeName, routeKey, null);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Console.WriteLine($&quot;\nRabbitMQ连接成功，\n\n请输入消息，输入exit退出！&quot;);</span><br><span class="line"></span><br><span class="line">string input;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    input = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">    var sendBytes = Encoding.UTF8.GetBytes(input);</span><br><span class="line">    //发布消息</span><br><span class="line">    channel.BasicPublish(exchangeName, &quot;TestRouteKey.one&quot;, null, sendBytes);</span><br><span class="line"></span><br><span class="line">&#125; while (input.Trim().ToLower() != &quot;exit&quot;);</span><br><span class="line">channel.Close();</span><br><span class="line">connection.Close();</span><br></pre></td></tr></table></figure><hr><blockquote><p>本文转自：<a href="http://www.cnblogs.com/stulzq/p/7551819.html" target="_blank" rel="noopener">http://www.cnblogs.com/stulzq/p/7551819.html</a><br>本人进行了部分精简。若有侵权，请告知！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;最简单的使用&quot;&gt;&lt;a href=&quot;#最简单的使用&quot; class=&quot;headerlink&quot; title=&quot;最简单的使用&quot;&gt;&lt;/a&gt;最简单的使用&lt;/h4&gt;&lt;h5 id=&quot;1、-引用-rabbitMQ-Client&quot;&gt;&lt;a href=&quot;#1、-引用-rabbitMQ-Client&quot; class=&quot;headerlink&quot; title=&quot;1、 引用 rabbitMQ.Client&quot;&gt;&lt;/a&gt;1、 引用 rabbitMQ.Client&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Install-Package RabbitMQ.Client&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2、-创建生产者&quot;&gt;&lt;a href=&quot;#2、-创建生产者&quot; class=&quot;headerlink&quot; title=&quot;2、 创建生产者&quot;&gt;&lt;/a&gt;2、 创建生产者&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//创建连接工厂&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ConnectionFactory factory = new ConnectionFactory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserName = &amp;quot;mqAdmin&amp;quot;,//用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Password = &amp;quot;mqAdmin&amp;quot;,//密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HostName = &amp;quot;192.168.1.103&amp;quot;//rabbitmq ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var connection = factory.CreateConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建通道&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var channel = connection.CreateModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//声明一个队列&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channel.QueueDeclare(&amp;quot;hello&amp;quot;, false, false, false, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Console.WriteLine(&amp;quot;\nRabbitMQ连接成功，请输入消息，输入exit退出！&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string input;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    input = Console.ReadLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var sendBytes = Encoding.UTF8.GetBytes(input);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //发布消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    channel.BasicPublish(&amp;quot;&amp;quot;, &amp;quot;hello&amp;quot;, null, sendBytes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; while (input.Trim().ToLower()!=&amp;quot;exit&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channel.Close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connection.Close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3、-创建生产者&quot;&gt;&lt;a href=&quot;#3、-创建生产者&quot; class=&quot;headerlink&quot; title=&quot;3、 创建生产者&quot;&gt;&lt;/a&gt;3、 创建生产者&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//创建连接工厂&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ConnectionFactory factory = new ConnectionFactory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UserName = &amp;quot;admin&amp;quot;,//用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Password = &amp;quot;admin&amp;quot;,//密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HostName = &amp;quot;192.168.157.130&amp;quot;//rabbitmq ip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var connection = factory.CreateConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//创建通道&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var channel = connection.CreateModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//事件基本消费者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EventingBasicConsumer consumer = new EventingBasicConsumer(channel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//接收到消息事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;consumer.Received += (ch, ea) =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var message = Encoding.UTF8.GetString(ea.Body);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine($&amp;quot;收到消息： &amp;#123;message&amp;#125;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //确认该消息已被消费&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    channel.BasicAck(ea.DeliveryTag, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//启动消费者 设置为手动应答消息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channel.BasicConsume(&amp;quot;hello&amp;quot;, false, consumer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Console.WriteLine(&amp;quot;消费者已启动&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Console.ReadKey();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;channel.Dispose();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connection.Close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RabbitMQ" scheme="http://blog.sharkyzh.cn/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="http://blog.sharkyzh.cn/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ常用命令</title>
    <link href="http://blog.sharkyzh.cn/post/b7d85c7f.html"/>
    <id>http://blog.sharkyzh.cn/post/b7d85c7f.html</id>
    <published>2018-06-27T09:20:17.000Z</published>
    <updated>2020-03-10T10:40:23.594Z</updated>
    
    <content type="html"><![CDATA[<h5 id="启用Web控制台"><a href="#启用Web控制台" class="headerlink" title="启用Web控制台"></a>启用Web控制台</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><h5 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq-server.service</span><br></pre></td></tr></table></figure><h5 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop rabbitmq-server.service</span><br></pre></td></tr></table></figure><h5 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq-server.service</span><br></pre></td></tr></table></figure> <a id="more"></a><h5 id="查看RabbitMQ状态"><a href="#查看RabbitMQ状态" class="headerlink" title="查看RabbitMQ状态"></a>查看RabbitMQ状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><h5 id="添加用户赋予管理员权限"><a href="#添加用户赋予管理员权限" class="headerlink" title="添加用户赋予管理员权限"></a>添加用户赋予管理员权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  add_user  mqAdmin  163.com</span><br><span class="line">rabbitmqctl  set_user_tags  mqAdmin  administrator</span><br><span class="line">rabbitmqctl set_permissions -p / mqAdmin “.“ “.“ “.*”</span><br></pre></td></tr></table></figure><h5 id="查看用户列表"><a href="#查看用户列表" class="headerlink" title="查看用户列表"></a>查看用户列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl delete_user username</span><br></pre></td></tr></table></figure><h5 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl oldPassword Username newPassword</span><br></pre></td></tr></table></figure><h5 id="访问Web控制台"><a href="#访问Web控制台" class="headerlink" title="访问Web控制台"></a>访问Web控制台</h5><p><a href="http://xxx:15672/注意配置防火墙，默认用户名密码都是guest，若新建用户一定要记得配置权限。" target="_blank" rel="noopener">http://xxx:15672/注意配置防火墙，默认用户名密码都是guest，若新建用户一定要记得配置权限。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  set_permissions   Username  ConfP  WriteP  ReadP</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;启用Web控制台&quot;&gt;&lt;a href=&quot;#启用Web控制台&quot; class=&quot;headerlink&quot; title=&quot;启用Web控制台&quot;&gt;&lt;/a&gt;启用Web控制台&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rabbitmq-plugins enable rabbitmq_management&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;开启服务&quot;&gt;&lt;a href=&quot;#开启服务&quot; class=&quot;headerlink&quot; title=&quot;开启服务&quot;&gt;&lt;/a&gt;开启服务&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl start rabbitmq-server.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;停止服务&quot;&gt;&lt;a href=&quot;#停止服务&quot; class=&quot;headerlink&quot; title=&quot;停止服务&quot;&gt;&lt;/a&gt;停止服务&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl stop rabbitmq-server.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;查看服务状态&quot;&gt;&lt;a href=&quot;#查看服务状态&quot; class=&quot;headerlink&quot; title=&quot;查看服务状态&quot;&gt;&lt;/a&gt;查看服务状态&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl status rabbitmq-server.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RabbitMQ" scheme="http://blog.sharkyzh.cn/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="http://blog.sharkyzh.cn/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ快速安装配置指南</title>
    <link href="http://blog.sharkyzh.cn/post/3042f478.html"/>
    <id>http://blog.sharkyzh.cn/post/3042f478.html</id>
    <published>2018-06-27T08:46:17.000Z</published>
    <updated>2020-03-10T10:40:23.594Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总结一下在CentOS7环境下的安装配置过程,详细安装指南请查看官网原文</p></blockquote><h4 id="一、安装RabbitMQ-server"><a href="#一、安装RabbitMQ-server" class="headerlink" title="一、安装RabbitMQ server"></a>一、安装RabbitMQ server</h4><ol><li>安装epel源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><ol><li>安装Erlang</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y erlang</span><br></pre></td></tr></table></figure><ol><li>安装RabbitMQ server，请自行到官网下载rpm包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y rabbitmq-server-3.6.12-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="二、启动RabbitMQ-server"><a href="#二、启动RabbitMQ-server" class="headerlink" title="二、启动RabbitMQ server"></a>二、启动RabbitMQ server</h4><ol><li>设置RabbitMQ以后台方式运行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable rabbitmq-server.service</span><br></pre></td></tr></table></figure> <a id="more"></a><ol><li>启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq-server.service</span><br></pre></td></tr></table></figure><ol><li>查询状态</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq-server.service</span><br></pre></td></tr></table></figure><h4 id="三、-调整系统限制"><a href="#三、-调整系统限制" class="headerlink" title="三、 调整系统限制"></a>三、 调整系统限制</h4><p>调整操作系统允许打开文件的最大数量</p><p>vi工具打开，没有这文件就创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/rabbitmq-server.service.d/limits.conf</span><br></pre></td></tr></table></figure><p>文件添加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">LimitNOFILE=300000</span><br></pre></td></tr></table></figure><p>hard limit方式设置每个用户允许打开文件的最大数量：</p><p>vi工具打开，没有这文件就创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>行末添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 65536</span><br><span class="line">* hard nproc 65536</span><br></pre></td></tr></table></figure><p>启用pam_limits.so模块：</p><p>编辑文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/pam.d/login</span><br></pre></td></tr></table></figure><p>文件末尾添加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session required pam_limits.so</span><br></pre></td></tr></table></figure><p>这是告诉Linux在用户完成系统登录后，应该调用pam_limits.so模块设置<br>系统对该用户可使用的各种资源数量的最大限制(包括用户可打开的最大文件数限制)<br>注意：</p><p>每个用户允许打开文件的最大数量 &lt; 操作系统允许打开文件的最大数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soft limit &lt; hard limit</span><br></pre></td></tr></table></figure><h4 id="四、访问管理后台"><a href="#四、访问管理后台" class="headerlink" title="四、访问管理后台"></a>四、访问管理后台</h4><p>RabbitMQ默认访问帐号是：guest，密码也是guest。访问地址是：<a href="http://xxx.xxx.xxx.xxx:15672。但是知道这些还不够。因为guest帐号默认只能从RabbitMQ服务端的本机访问，因此需要设置一下。" target="_blank" rel="noopener">http://xxx.xxx.xxx.xxx:15672。但是知道这些还不够。因为guest帐号默认只能从RabbitMQ服务端的本机访问，因此需要设置一下。</a></p><ol><li>需要找到RabbitMQ的日志文件：/var/log/rabbitmq/rabbit@beta-cat.log，beta-cat是我的linux主机名。查看文件会找到配置文件存放信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=INFO REPORT==== 1-Oct-2017::23:32:45 ===</span><br><span class="line">node           : rabbit@beta-cat</span><br><span class="line">home dir       : /var/lib/rabbitmq</span><br><span class="line">config file(s) : /etc/rabbitmq/rabbitmq.config (not found)</span><br></pre></td></tr></table></figure><ol><li>新建一个文件：/etc/rabbitmq/rabbitmq.config，输入一下配置内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</span><br></pre></td></tr></table></figure><ol><li>重启一下RabbitMQ：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl stop rabbitmq-server.service</span><br><span class="line">systemctl start rabbitmq-server.service</span><br></pre></td></tr></table></figure><ol><li>开放端口</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">##设置开放端口：</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=15672/tcp</span><br><span class="line"></span><br><span class="line">##重新加载配置：</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">##检查已开放端口：</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总结一下在CentOS7环境下的安装配置过程,详细安装指南请查看官网原文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、安装RabbitMQ-server&quot;&gt;&lt;a href=&quot;#一、安装RabbitMQ-server&quot; class=&quot;headerlink&quot; title=&quot;一、安装RabbitMQ server&quot;&gt;&lt;/a&gt;一、安装RabbitMQ server&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;安装epel源&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y epel-release&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;安装Erlang&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y erlang&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;安装RabbitMQ server，请自行到官网下载rpm包&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y rabbitmq-server-3.6.12-1.el7.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;二、启动RabbitMQ-server&quot;&gt;&lt;a href=&quot;#二、启动RabbitMQ-server&quot; class=&quot;headerlink&quot; title=&quot;二、启动RabbitMQ server&quot;&gt;&lt;/a&gt;二、启动RabbitMQ server&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;设置RabbitMQ以后台方式运行&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable rabbitmq-server.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="RabbitMQ" scheme="http://blog.sharkyzh.cn/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="http://blog.sharkyzh.cn/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>GitBash与cmd设置代理</title>
    <link href="http://blog.sharkyzh.cn/post/e3bb5ff8.html"/>
    <id>http://blog.sharkyzh.cn/post/e3bb5ff8.html</id>
    <published>2018-06-25T03:51:49.000Z</published>
    <updated>2020-03-10T10:40:23.591Z</updated>
    
    <content type="html"><![CDATA[<h5 id="GitBash设置代理"><a href="#GitBash设置代理" class="headerlink" title="GitBash设置代理"></a>GitBash设置代理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos; </span><br><span class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br></pre></td></tr></table></figure><h5 id="cmd设置代理"><a href="#cmd设置代理" class="headerlink" title="cmd设置代理"></a>cmd设置代理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:1080</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;GitBash设置代理&quot;&gt;&lt;a href=&quot;#GitBash设置代理&quot; class=&quot;headerlink&quot; title=&quot;GitBash设置代理&quot;&gt;&lt;/a&gt;GitBash设置代理&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="others" scheme="http://blog.sharkyzh.cn/categories/others/"/>
    
    
      <category term="其它" scheme="http://blog.sharkyzh.cn/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>V2RayN简单使用教程</title>
    <link href="http://blog.sharkyzh.cn/post/50d46b4d.html"/>
    <id>http://blog.sharkyzh.cn/post/50d46b4d.html</id>
    <published>2018-04-02T06:19:25.000Z</published>
    <updated>2020-03-10T10:40:23.596Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于 V2Ray 没有自带 GUI 配置界面，所以说客户端使用还是有一点不方便。而V2RayN 则是 windows下 平台一个对新手比较友好的 V2Ray GUI 客户端。</p></blockquote><p>以下内容都是默认使用233blog的一键脚本安装为前提。</p><p>下面简单介绍下v2ray的简单使用：</p><h5 id="下载v2ray-core"><a href="#下载v2ray-core" class="headerlink" title="下载v2ray core"></a>下载v2ray core</h5><p>下载地址：<a href="https://github.com/v2ray/v2ray-core/releases/latest" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core/releases/latest</a></p><p>选择 v2ray-windows-64.zip 下载，如果你的系统是 32 位的那就选择 v2ray-windows-32.zip。<br>下载完成，解压。</p><h5 id="下载-v2RayN"><a href="#下载-v2RayN" class="headerlink" title="下载 v2RayN"></a>下载 v2RayN</h5><p>下载链接： <a href="https://github.com/2dust/v2rayN/releases/latest" target="_blank" rel="noopener">https://github.com/2dust/v2rayN/releases/latest</a><br>然后选择 V2RayN.exe 下载<br>将下载完成后的 V2RayN.exe 复制到之前打开的 V2Ray 文件夹目录</p><h5 id="获取-v2Ray-客户端配置信息"><a href="#获取-v2Ray-客户端配置信息" class="headerlink" title="获取 v2Ray 客户端配置信息"></a>获取 v2Ray 客户端配置信息</h5><p>使用233blog的脚本安装完之后会显示v2ray的配置信息，也可以ssh登录到vps上后，使用命令v2ray并按1来查看v2ray配置信息。</p><p>本次举例以 ws+tls+站点伪装 为例</p><p>配置信息如下：</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpyedf21l4j20g40asweu.jpg" alt="配置信息"></p><h5 id="v2ray导入v2ray配置"><a href="#v2ray导入v2ray配置" class="headerlink" title="v2ray导入v2ray配置"></a>v2ray导入v2ray配置</h5><p>右键选择以管理员身份运行 V2RayN.exe 程序。</p><p>打开界面如下：</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpyesxsn2gj20b408gq3f.jpg" alt="界面01"></p><p>注意：打开过程中，可能会提示是否允许联网的界面，全部勾选上并选择允许就行了。</p><p>选择 添加[VMess]服务器</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpyesxx2ucj206z0btta6.jpg" alt="界面02"></p><p>按上面的配置进行填写<br><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpzfy0vdavj20kc0e9weq.jpg" alt="界面03"></p><p>最后点击确定即可完成v2ray的配置。</p><hr><h5 id="v2rayN的其它配置"><a href="#v2rayN的其它配置" class="headerlink" title="v2rayN的其它配置"></a>v2rayN的其它配置</h5><h6 id="自定义代理网址或IP"><a href="#自定义代理网址或IP" class="headerlink" title="自定义代理网址或IP"></a>自定义代理网址或IP</h6><p>点击主界面的参数设置，在弹出的窗口中，选择Core:路由设置选项卡，在下方的文本框内输入需要使用代理访问的网址即可。</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpzmcxtpqrj20eq0gnjre.jpg" alt="自定义代理网址或IP"></p><h6 id="设置GFWList地址"><a href="#设置GFWList地址" class="headerlink" title="设置GFWList地址"></a>设置GFWList地址</h6><p>GFWList地址：</p><p><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p><p>直接复制粘贴进去。</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpzmcxx2n3j20ep0gm3yi.jpg" alt="GFWList"></p><p>右击系统托盘，选择更新PAC，注意，这里必须添加完代理才可以操作。</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpzmgbvrtgj205p07bmxr.jpg" alt="更新PAC"></p><h6 id="快速添加代理"><a href="#快速添加代理" class="headerlink" title="快速添加代理"></a>快速添加代理</h6><p>没有配置，只有别人分享的vmess链接，只需要点击主界面的服务器，添加VMess服务器，导入配置文件，并选择从剪贴板导入URL，所有的参数会自动填写完成。</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpzfy0z25fj20kc0e8jro.jpg" alt="快速添加"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于 V2Ray 没有自带 GUI 配置界面，所以说客户端使用还是有一点不方便。而V2RayN 则是 windows下 平台一个对新手比较友好的 V2Ray GUI 客户端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下内容都是默认使用233bl
      
    
    </summary>
    
      <category term="v2ray" scheme="http://blog.sharkyzh.cn/categories/v2ray/"/>
    
      <category term="v2rayN" scheme="http://blog.sharkyzh.cn/categories/v2ray/v2rayN/"/>
    
    
      <category term="v2ray" scheme="http://blog.sharkyzh.cn/tags/v2ray/"/>
    
      <category term="v2rayN" scheme="http://blog.sharkyzh.cn/tags/v2rayN/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.0.4开启SSH服务并启用root登录SSH</title>
    <link href="http://blog.sharkyzh.cn/post/3f6688cf.html"/>
    <id>http://blog.sharkyzh.cn/post/3f6688cf.html</id>
    <published>2018-03-14T10:43:58.000Z</published>
    <updated>2020-03-10T10:40:23.595Z</updated>
    
    <content type="html"><![CDATA[<h4 id="开启SSH服务"><a href="#开启SSH服务" class="headerlink" title="开启SSH服务"></a>开启SSH服务</h4><ol><li>安装openssh-server</li></ol><p>在终端中输入: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><ol><li>查看查看ssh服务是否启动</li></ol><p>在终端中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ps -e | grep ssh</span><br></pre></td></tr></table></figure><p>如果显示有sshd，则说明ssh服务已经启动，如果没有启动，则输入以下命令来启动ssh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><p>启动完成后可ssh至服务器。</p><hr><h4 id="启用root登录SSH"><a href="#启用root登录SSH" class="headerlink" title="启用root登录SSH"></a>启用root登录SSH</h4><ol><li>使用ubuntu用户登录，密码为服务器配置时设置的密码，可在重置密码中修改</li><li><p>修改 root 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到Authentication下面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Authentication:</span><br><span class="line">LoginGraceTime 120</span><br><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">StrictModes yes</span><br></pre></td></tr></table></figure></p><p>把PermitRootLogin源行注释，并增加一行为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#PermitRootLogin prohibit-password  </span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure></p><ol><li>重启ssh</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure><p>接下来就可以用XShell以root身份登录了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;开启SSH服务&quot;&gt;&lt;a href=&quot;#开启SSH服务&quot; class=&quot;headerlink&quot; title=&quot;开启SSH服务&quot;&gt;&lt;/a&gt;开启SSH服务&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;安装openssh-server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在终端中输入: &lt;/p&gt;

      
    
    </summary>
    
      <category term="Linux" scheme="http://blog.sharkyzh.cn/categories/Linux/"/>
    
      <category term="ssh" scheme="http://blog.sharkyzh.cn/categories/Linux/ssh/"/>
    
    
      <category term="Linux" scheme="http://blog.sharkyzh.cn/tags/Linux/"/>
    
      <category term="ssh" scheme="http://blog.sharkyzh.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>IOS下使用v2ray之简单教程</title>
    <link href="http://blog.sharkyzh.cn/post/c4024172.html"/>
    <id>http://blog.sharkyzh.cn/post/c4024172.html</id>
    <published>2018-03-14T08:20:14.000Z</published>
    <updated>2020-03-10T10:40:23.592Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上次收集了一些v2ray的一键脚本，有些朋友问我在IOS上如何使用，本编内容就介绍下IOS下v2ray常用客户端的使用教程。</p></blockquote><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>新手推荐使用233blog的一键脚本来配置v2ray。<br>可参考我<a href="https://blog.sharkyzh.cn/post/a5cb4d7f.html">上篇博客文章</a>，也可直接访问<a href="https://233blog.com/post/28/" target="_blank" rel="noopener">233Blog</a>获取一键脚本。</p><hr><p>以下内容都是默认使用233blog的一键脚本安装为前提。</p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>V2Ray 官方没有 iOS 客户端，第三方客户端有：kitsunebi，shadowrocket，Pepi (ShadowRay)。</p><h4 id="kitsunebi"><a href="#kitsunebi" class="headerlink" title="kitsunebi"></a>kitsunebi</h4><p>kitsunebi目前对 V2Ray 支持最完全的应用，支持所有 vmess 链接使用方。</p><h5 id="一、扫码配置（推荐）"><a href="#一、扫码配置（推荐）" class="headerlink" title="一、扫码配置（推荐）"></a>一、扫码配置（推荐）</h5><p>使用脚本安装完成后会提示生成二维码链接，打开链接就可以得到二维码，直接扫码配置即可，注意，需要手动输入AlterId。<br>如果安装后忘记生成二维码链接，可以输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2ray qr</span><br></pre></td></tr></table></figure></p><p>生成二维码链接后再进行扫码操作。</p><p><strong>再次提醒：需要手动输入AlterId。</strong></p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpc7qwgeg5j20af0c474d.jpg" alt="image"></p> <a id="more"></a><h5 id="二、手动输入配置"><a href="#二、手动输入配置" class="headerlink" title="二、手动输入配置"></a>二、手动输入配置</h5><ol><li>点击右上角加号，进入配置填写页面。</li></ol><p>依次填入地址，端口，UUID，选择加密方式，填写AlterId</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpcccru7d5j20af0esaa7.jpg" alt="image"></p><ol><li>加密方式有如下几种，根据自己在服务器上的配置进行选择</li></ol><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpcejy8g7mj20af0680sm.jpg" alt="image"></p><ol><li>传输协议：</li></ol><blockquote><p>传输协议分为tcp,kcp与ws(websocket)。</p></blockquote><h6 id="tcp最简单，直接选择tcp协议就行了，无需其它配置。"><a href="#tcp最简单，直接选择tcp协议就行了，无需其它配置。" class="headerlink" title="tcp最简单，直接选择tcp协议就行了，无需其它配置。"></a>tcp最简单，直接选择tcp协议就行了，无需其它配置。</h6><h6 id="kcp传输协议"><a href="#kcp传输协议" class="headerlink" title="kcp传输协议"></a>kcp传输协议</h6><p>KCP则需要选择伪装头部，当然也可以不进行伪装，以服务器配置为准进行选择。</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpcenmaajzj20af0ijt8r.jpg" alt="image"></p><p>我的配置如下</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpcetz2wjsj20af0fhglr.jpg" alt="kcp伪装"></p><h6 id="ws传输协议"><a href="#ws传输协议" class="headerlink" title="ws传输协议"></a>ws传输协议</h6><p>ws则需要填写ws路径与ws host，如果是HTTPS还需要选择TLS。我的配置（ws+站点伪装+tls）如下，可以进行参考。<br><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpcerd4ow1j20af0ea0sv.jpg" alt="ws+站点伪装+tls"></p><hr><h4 id="Shadowrocket"><a href="#Shadowrocket" class="headerlink" title="Shadowrocket"></a>Shadowrocket</h4><p>小火箭大家应该都知道，对于v2ray缺点就是不支持kcp,并且不支持扫码添加v2ray配置（修正，只支持小火箭自己导出的二维码）。</p><h5 id="手动输入配置"><a href="#手动输入配置" class="headerlink" title="手动输入配置"></a>手动输入配置</h5><p>ws+tls+站点伪装</p><p><img src="https://ws1.sinaimg.cn/large/7512bce3ly1fpcf1cciunj20ku11275d.jpg" alt="ws+tls+站点伪装"></p><p>如果不需要站点伪装，直接把最下面的输入框留空就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上次收集了一些v2ray的一键脚本，有些朋友问我在IOS上如何使用，本编内容就介绍下IOS下v2ray常用客户端的使用教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;服务端配置&quot;&gt;&lt;a href=&quot;#服务端配置&quot; class=&quot;headerlink&quot; title=&quot;服务端配置&quot;&gt;&lt;/a&gt;服务端配置&lt;/h4&gt;&lt;p&gt;新手推荐使用233blog的一键脚本来配置v2ray。&lt;br&gt;可参考我&lt;a href=&quot;https://blog.sharkyzh.cn/post/a5cb4d7f.html&quot;&gt;上篇博客文章&lt;/a&gt;，也可直接访问&lt;a href=&quot;https://233blog.com/post/28/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;233Blog&lt;/a&gt;获取一键脚本。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;以下内容都是默认使用233blog的一键脚本安装为前提。&lt;/p&gt;
&lt;h4 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h4&gt;&lt;p&gt;V2Ray 官方没有 iOS 客户端，第三方客户端有：kitsunebi，shadowrocket，Pepi (ShadowRay)。&lt;/p&gt;
&lt;h4 id=&quot;kitsunebi&quot;&gt;&lt;a href=&quot;#kitsunebi&quot; class=&quot;headerlink&quot; title=&quot;kitsunebi&quot;&gt;&lt;/a&gt;kitsunebi&lt;/h4&gt;&lt;p&gt;kitsunebi目前对 V2Ray 支持最完全的应用，支持所有 vmess 链接使用方。&lt;/p&gt;
&lt;h5 id=&quot;一、扫码配置（推荐）&quot;&gt;&lt;a href=&quot;#一、扫码配置（推荐）&quot; class=&quot;headerlink&quot; title=&quot;一、扫码配置（推荐）&quot;&gt;&lt;/a&gt;一、扫码配置（推荐）&lt;/h5&gt;&lt;p&gt;使用脚本安装完成后会提示生成二维码链接，打开链接就可以得到二维码，直接扫码配置即可，注意，需要手动输入AlterId。&lt;br&gt;如果安装后忘记生成二维码链接，可以输入命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;v2ray qr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;生成二维码链接后再进行扫码操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再次提醒：需要手动输入AlterId。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/7512bce3ly1fpc7qwgeg5j20af0c474d.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="翻山越岭" scheme="http://blog.sharkyzh.cn/categories/%E7%BF%BB%E5%B1%B1%E8%B6%8A%E5%B2%AD/"/>
    
      <category term="v2ray" scheme="http://blog.sharkyzh.cn/categories/%E7%BF%BB%E5%B1%B1%E8%B6%8A%E5%B2%AD/v2ray/"/>
    
    
      <category term="v2ray" scheme="http://blog.sharkyzh.cn/tags/v2ray/"/>
    
      <category term="IOS" scheme="http://blog.sharkyzh.cn/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>v2ray一键脚本收集整理</title>
    <link href="http://blog.sharkyzh.cn/post/a5cb4d7f.html"/>
    <id>http://blog.sharkyzh.cn/post/a5cb4d7f.html</id>
    <published>2018-03-06T02:31:58.000Z</published>
    <updated>2020-03-10T10:40:23.600Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要收集网络上的v2ray脚本，该页面的脚本都经过本人验证使用没问题。</p><p>最后更新时间：2018-03-06</p></blockquote><h4 id="V2Ray-基于-Nginx-的-vmess-ws-tls-一键安装脚本"><a href="#V2Ray-基于-Nginx-的-vmess-ws-tls-一键安装脚本" class="headerlink" title="V2Ray 基于 Nginx 的 vmess+ws+tls 一键安装脚本"></a>V2Ray 基于 Nginx 的 vmess+ws+tls 一键安装脚本</h4><blockquote><p>from: <a href="https://github.com/wulabing/V2Ray_ws-tls_bash_onekey" target="_blank" rel="noopener">https://github.com/wulabing/V2Ray_ws-tls_bash_onekey</a></p></blockquote><h5 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wulabing/V2Ray_ws-tls_bash_onekey.git temp &amp;&amp; cd temp &amp;&amp; bash install.sh | tee v2log.txt</span><br></pre></td></tr></table></figure><h5 id="V2ray-core-更新方式"><a href="#V2ray-core-更新方式" class="headerlink" title="V2ray core 更新方式"></a>V2ray core 更新方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行： bash &lt;(curl -L -s https://install.direct/go.sh)</span><br></pre></td></tr></table></figure><h5 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动 V2ray：systemctl start v2ray</span><br><span class="line">启动 Nginx：systemctl start nginx</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h4 id="V2RAY-基于-NGINX-的-VMESS-WS-TLS-Website-Use-Host"><a href="#V2RAY-基于-NGINX-的-VMESS-WS-TLS-Website-Use-Host" class="headerlink" title="V2RAY 基于 NGINX 的 VMESS+WS+TLS+Website(Use Host)"></a>V2RAY 基于 NGINX 的 VMESS+WS+TLS+Website(Use Host)</h4><blockquote><p>from: <a href="https://github.com/dylanbai8/V2Ray_ws-tls_Website_onekey" target="_blank" rel="noopener">https://github.com/dylanbai8/V2Ray_ws-tls_Website_onekey</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl https://raw.githubusercontent.com/dylanbai8/V2Ray_ws-tls_Website_onekey/master/install.sh)</span><br></pre></td></tr></table></figure><p>尽量使用 Debian8 , 如果需要修改配置，运行脚本重新安装一次即可。</p><hr><h4 id="最好用的-V2Ray-一键安装脚本-amp-管理脚本"><a href="#最好用的-V2Ray-一键安装脚本-amp-管理脚本" class="headerlink" title="最好用的 V2Ray 一键安装脚本 &amp; 管理脚本"></a>最好用的 V2Ray 一键安装脚本 &amp; 管理脚本</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://233blog.com/v2ray.sh)</span><br></pre></td></tr></table></figure><h5 id="快速管理"><a href="#快速管理" class="headerlink" title="快速管理"></a>快速管理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v2ray info 查看 V2Ray 配置信息</span><br><span class="line">v2ray config 修改 V2Ray 配置</span><br><span class="line">v2ray link 生成 V2Ray 配置文件链接</span><br><span class="line">v2ray infolink 生成 V2Ray 配置信息链接</span><br><span class="line">v2ray qr 生成 V2Ray 配置二维码链接</span><br><span class="line">v2ray ss 修改 Shadowsocks 配置</span><br><span class="line">v2ray ssinfo 查看 Shadowsocks 配置信息</span><br><span class="line">v2ray ssqr 生成 Shadowsocks 配置二维码链接</span><br><span class="line">v2ray status 查看 V2Ray 运行状态</span><br><span class="line">v2ray start 启动 V2Ray</span><br><span class="line">v2ray stop 停止 V2Ray</span><br><span class="line">v2ray restart 重启 V2Ray</span><br><span class="line">v2ray log 查看 V2Ray 运行日志</span><br><span class="line">v2ray update 更新 V2Ray</span><br><span class="line">v2ray update.sh 更新 V2Ray 管理脚本</span><br><span class="line">v2ray uninstall 卸载 V2Ray</span><br></pre></td></tr></table></figure><h5 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h5><blockquote><p>from： <a href="https://233blog.com/post/16" target="_blank" rel="noopener">https://233blog.com/post/16</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">V2Ray 配置文件路径：/etc/v2ray/config.json</span><br><span class="line">Caddy 配置文件路径：/etc/caddy/Caddyfile</span><br><span class="line">脚本配置文件路径: /etc/v2ray/233blog_v2ray_backup.txt</span><br></pre></td></tr></table></figure><h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><p>V2Ray 客户端配置文件解压密码为 233blog.com，SOCKS 监听端口为 2333， HTTP 监听端口为 6666<br>可能某些 V2Ray 客户端的选项或描述略有不同，但事实上，此脚本显示的 V2Ray 配置信息已经足够详细，由于客户端的不同，请对号入座。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要收集网络上的v2ray脚本，该页面的脚本都经过本人验证使用没问题。&lt;/p&gt;
&lt;p&gt;最后更新时间：2018-03-06&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;V2Ray-基于-Nginx-的-vmess-ws-tls-一键安装脚本&quot;&gt;&lt;a href=&quot;#V2Ray-基于-Nginx-的-vmess-ws-tls-一键安装脚本&quot; class=&quot;headerlink&quot; title=&quot;V2Ray 基于 Nginx 的 vmess+ws+tls 一键安装脚本&quot;&gt;&lt;/a&gt;V2Ray 基于 Nginx 的 vmess+ws+tls 一键安装脚本&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;from: &lt;a href=&quot;https://github.com/wulabing/V2Ray_ws-tls_bash_onekey&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/wulabing/V2Ray_ws-tls_bash_onekey&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;安装方式&quot;&gt;&lt;a href=&quot;#安装方式&quot; class=&quot;headerlink&quot; title=&quot;安装方式&quot;&gt;&lt;/a&gt;安装方式&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/wulabing/V2Ray_ws-tls_bash_onekey.git temp &amp;amp;&amp;amp; cd temp &amp;amp;&amp;amp; bash install.sh | tee v2log.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;V2ray-core-更新方式&quot;&gt;&lt;a href=&quot;#V2ray-core-更新方式&quot; class=&quot;headerlink&quot; title=&quot;V2ray core 更新方式&quot;&gt;&lt;/a&gt;V2ray core 更新方式&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;执行： bash &amp;lt;(curl -L -s https://install.direct/go.sh)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;启动方式&quot;&gt;&lt;a href=&quot;#启动方式&quot; class=&quot;headerlink&quot; title=&quot;启动方式&quot;&gt;&lt;/a&gt;启动方式&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;启动 V2ray：systemctl start v2ray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;启动 Nginx：systemctl start nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="v2ray" scheme="http://blog.sharkyzh.cn/categories/v2ray/"/>
    
    
      <category term="v2ray" scheme="http://blog.sharkyzh.cn/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装Nginx与DotNetCore环境</title>
    <link href="http://blog.sharkyzh.cn/post/8b1ab2d9.html"/>
    <id>http://blog.sharkyzh.cn/post/8b1ab2d9.html</id>
    <published>2018-02-24T01:22:49.000Z</published>
    <updated>2020-03-10T10:40:23.588Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装-dotnet-core环境"><a href="#安装-dotnet-core环境" class="headerlink" title="安装 dotnet core环境"></a>安装 dotnet core环境</h4><ol><li>添加 dotnet 产品源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc</span><br><span class="line">sudo sh -c &apos;echo -e &quot;[packages-microsoft-com-prod]\nname=packages-microsoft-com-prod \nbaseurl= https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/dotnetdev.repo&apos;</span><br></pre></td></tr></table></figure></li></ol><p>2.安装 .NET SDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install libunwind libicu</span><br><span class="line">sudo yum install dotnet-sdk-2.1.4</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>1.添加 Nginx 仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure><ol><li>安装 Nginx</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><ol><li>启动 Nginx</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br></pre></td></tr></table></figure><ol><li>防火墙允许HTTP与HTTPS传输</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><ol><li>Nginx 开机启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><hr><p>参考文章：</p><ol><li><a href="https://www.microsoft.com/net/learn/get-started/linuxcentos" target="_blank" rel="noopener">https://www.microsoft.com/net/learn/get-started/linuxcentos</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-centos-7</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装-dotnet-core环境&quot;&gt;&lt;a href=&quot;#安装-dotnet-core环境&quot; class=&quot;headerlink&quot; title=&quot;安装 dotnet core环境&quot;&gt;&lt;/a&gt;安装 dotnet core环境&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;添加 dotne
      
    
    </summary>
    
      <category term=".net core" scheme="http://blog.sharkyzh.cn/categories/net-core/"/>
    
    
      <category term=".net core" scheme="http://blog.sharkyzh.cn/tags/net-core/"/>
    
      <category term="centos" scheme="http://blog.sharkyzh.cn/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>ngrok配置https</title>
    <link href="http://blog.sharkyzh.cn/post/8f3e9247.html"/>
    <id>http://blog.sharkyzh.cn/post/8f3e9247.html</id>
    <published>2018-01-30T09:19:10.000Z</published>
    <updated>2020-03-10T10:40:23.599Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近团队要做微信小程序的开发，需要用到https，以前搭建的ngrok由于使用的是自己签发的证书，所以网址栏会显示大大的红叉，对于强迫症的人实在是难受，搜索了网上的教程及结合自己的摸索，现记录下来，方便后人能方便的配置。</p></blockquote><h4 id="第一部分-申请AlphaSSL-泛域名证书"><a href="#第一部分-申请AlphaSSL-泛域名证书" class="headerlink" title="第一部分 申请AlphaSSL 泛域名证书"></a>第一部分 申请AlphaSSL 泛域名证书</h4><p>因为使用的是4级域名，并且域名不可确定，所以需要申请泛域名证书。本次申请的是免费的泛域名证书。</p><h5 id="准备域名邮箱"><a href="#准备域名邮箱" class="headerlink" title="准备域名邮箱"></a>准备域名邮箱</h5><p>由于证书验证需要域名邮箱作验证，所以首先需要准备好接收邮件的域名邮箱。</p><p>域名邮箱可以选择 QQ 域名邮箱，很简单方便，也有操作指南，设置好 MX 解析后用另一个邮箱给域名邮箱发一封邮件测试无误即可。目前 QQ 邮箱并没有屏蔽 AlphaSSL 发来的邮件，因此可以放心使用。必须使用下面的 用户名@域名 邮箱之一才能接收到验证邮件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin@your-domain.com</span><br><span class="line">administrator@your-domain.com</span><br><span class="line">hostmaster@your-domain.com</span><br><span class="line">postmaster@your-domain.com</span><br><span class="line">webmaster@your-domain.com</span><br></pre></td></tr></table></figure><p>具体步骤自己摸索下,这里就不细说了。</p><p>如果有自己的企业邮箱，也是可以使用的，但是一定要添加上面格式的邮箱账户才可收邮件，谨记！</p><p>QQ企业邮箱地址：<a href="https://exmail.qq.com" target="_blank" rel="noopener">https://exmail.qq.com</a></p><h5 id="准备CSR-文件"><a href="#准备CSR-文件" class="headerlink" title="准备CSR 文件"></a>准备CSR 文件</h5><p>AlphaSSL 证书的申请，需要先提交域名的 CSR（证书请求文件），然后用域名邮箱作验证，保证你是这个域名的所有者。CSR 很好生成，可以用 openssl 在本地生成，也可以去各大工具网站在线生成。<br><a id="more"></a><br>本次使用<a href="https://www.chinassl.net/ssltools/generator-csr.html" target="_blank" rel="noopener">https://www.chinassl.net/ssltools/generator-csr.html</a>来生成CSR文件。</p><p>填写完信息后，最好勾选上发送生成的CSR文件到上面输入的邮箱。</p><blockquote><p>注意：域名这里填写*.tunnel.51ngrok.cn，大家根据自己的域名填写。一定保存好生成 CSR 文件时同时生成的 Key 文件，部署证书时要用。</p></blockquote><h5 id="域名的准备工作"><a href="#域名的准备工作" class="headerlink" title="域名的准备工作"></a>域名的准备工作</h5><p>进入申请证书页面<a href="https://en.assl.space/" target="_blank" rel="noopener">https://en.assl.space/</a></p><p>申请证书的页面需要你填写一个 Email Address.</p><p>这里最好填写域名的联系人邮箱（在域名提供商那里可以查询得到的），这是接收证书的邮箱，填写其它邮箱可能会不能接收到邮件，一定要注意。</p><p>另外最好关闭域名保护与清除域名的CNAME记录，防止AlphaSSL无法校验域名信息。</p><h5 id="收到邮件后的工作"><a href="#收到邮件后的工作" class="headerlink" title="收到邮件后的工作"></a>收到邮件后的工作</h5><p>同意申请链接只能点击一次</p><p>在域名邮箱收到验证邮件之后，点击 I Approve，AlphaSSL 便会把证书的 CRT 以邮件内容的形式发送给你，注意，I Approve 这个按钮只能点击一次，点击后不管有没有收到邮件，都会失效。因此接收证书的邮箱一定要填对，确保可以收到 CRT。</p><h5 id="合并证书"><a href="#合并证书" class="headerlink" title="合并证书"></a>合并证书</h5><p>在收到的邮件最下方就是你申请的域名证书。</p><p>新建一个文本文件，把邮件中的域名证书内容粘贴进去，这里要注意的是需要包含 BEGIN 这行。</p><p>然后到AlphaSSL网站<a href="https://www.alphassl.com/support/install-root-certificate.html" target="_blank" rel="noopener">https://www.alphassl.com/support/install-root-certificate.html</a>把中级证书也到粘贴到上面内容的后面。</p><p>文本文件后缀改为.crt的证书文件。这个crt文件是可以直接部署到服务器上，并且不会因为证书链不完整而被浏览器报错。</p><hr><h4 id="第二部分-把证书编译进ngrok"><a href="#第二部分-把证书编译进ngrok" class="headerlink" title="第二部分 把证书编译进ngrok"></a>第二部分 把证书编译进ngrok</h4><h5 id="准备证书"><a href="#准备证书" class="headerlink" title="准备证书"></a>准备证书</h5><p>在<a href="https://www.alphassl.com/support/install-root-certificate.html" target="_blank" rel="noopener">AlphaSSL官网</a>下载Root CA，并重命名为ngrokroot.crt</p><p>快速下载地址：<a href="https://www.alphassl.com/support/roots/root.pem" target="_blank" rel="noopener">点我下载</a></p><p>把上面合成的证书重命名为snakeoil.crt</p><p>把申请证书时生成的私钥key文件重命名为snakeoil.key</p><blockquote><p>把ngrokroot.crt拷贝到assets/client/tls/文件夹下覆盖原来的文件<br>把snakeoil.crt拷贝到assets/server/tls/文件夹下覆盖原来的文件<br>把snakeoil.key拷贝到assets/server/tls/文件夹下覆盖原来的文件<br>拷贝snakeoil.key到bin文件夹内<br>拷贝snakeoil.crt到bin文件夹内</p></blockquote><h5 id="编辑ngrok服务端与客户端"><a href="#编辑ngrok服务端与客户端" class="headerlink" title="编辑ngrok服务端与客户端"></a>编辑ngrok服务端与客户端</h5><h6 id="编译生成ngrok服务端"><a href="#编译生成ngrok服务端" class="headerlink" title="编译生成ngrok服务端"></a>编译生成ngrok服务端</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#如果是32位系统，这里 GOARCH=386</span><br><span class="line">GOOS=linux GOARCH=amd64  </span><br><span class="line">make release-server release-client</span><br></pre></td></tr></table></figure><blockquote><p>编译之后，就会在ngrok源码的bin目录下生成两个可执行文件：ngrokd、ngrok。其中ngrokd就是ngrok的服务端程序，ngrok就是ngrok的客户端程序。由于现在生成的客户端ngrok只能在linux下运行，因此如果想要生成windows下的客户端程序，需要继续进行交叉编译。</p></blockquote><h6 id="交叉编译生成windows客户端"><a href="#交叉编译生成windows客户端" class="headerlink" title="交叉编译生成windows客户端"></a>交叉编译生成windows客户端</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#如果是32位系统，这里 GOARCH=386</span><br><span class="line">GOOS=windows GOARCH=amd64</span><br><span class="line">make release-server release-client</span><br></pre></td></tr></table></figure><h5 id="运行ngrok服务端"><a href="#运行ngrok服务端" class="headerlink" title="运行ngrok服务端"></a>运行ngrok服务端</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrokd -domain=&quot;tunnel.51ngrok.cn&quot; -httpAddr=&quot;:8080&quot; -httpsAddr=&quot;:8081&quot; -tlsKey=&quot;snakeoil.key&quot; -tlsCrt=&quot;snakeoil.crt&quot;</span><br></pre></td></tr></table></figure><p>推荐使用screen管理！</p><h4 id="第三部分-配置nginx"><a href="#第三部分-配置nginx" class="headerlink" title="第三部分 配置nginx"></a>第三部分 配置nginx</h4><p>修改nginx配置文件，添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen 443;</span><br><span class="line">  server_name *.tunnel.51ngrok.cn;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Host $http_host:8080;</span><br><span class="line">    proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">    proxy_set_header Connection &quot;&quot;;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">  &#125;</span><br><span class="line">  ssl on;</span><br><span class="line">  ssl_certificate /usr/ngrok/bin/51ngrok.crt;</span><br><span class="line">  ssl_certificate_key /usr/ngrok/bin/51ngrok.key;</span><br><span class="line">  ssl_session_timeout  5m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近团队要做微信小程序的开发，需要用到https，以前搭建的ngrok由于使用的是自己签发的证书，所以网址栏会显示大大的红叉，对于强迫症的人实在是难受，搜索了网上的教程及结合自己的摸索，现记录下来，方便后人能方便的配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;第一部分-申请AlphaSSL-泛域名证书&quot;&gt;&lt;a href=&quot;#第一部分-申请AlphaSSL-泛域名证书&quot; class=&quot;headerlink&quot; title=&quot;第一部分 申请AlphaSSL 泛域名证书&quot;&gt;&lt;/a&gt;第一部分 申请AlphaSSL 泛域名证书&lt;/h4&gt;&lt;p&gt;因为使用的是4级域名，并且域名不可确定，所以需要申请泛域名证书。本次申请的是免费的泛域名证书。&lt;/p&gt;
&lt;h5 id=&quot;准备域名邮箱&quot;&gt;&lt;a href=&quot;#准备域名邮箱&quot; class=&quot;headerlink&quot; title=&quot;准备域名邮箱&quot;&gt;&lt;/a&gt;准备域名邮箱&lt;/h5&gt;&lt;p&gt;由于证书验证需要域名邮箱作验证，所以首先需要准备好接收邮件的域名邮箱。&lt;/p&gt;
&lt;p&gt;域名邮箱可以选择 QQ 域名邮箱，很简单方便，也有操作指南，设置好 MX 解析后用另一个邮箱给域名邮箱发一封邮件测试无误即可。目前 QQ 邮箱并没有屏蔽 AlphaSSL 发来的邮件，因此可以放心使用。必须使用下面的 用户名@域名 邮箱之一才能接收到验证邮件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;admin@your-domain.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;administrator@your-domain.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hostmaster@your-domain.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;postmaster@your-domain.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webmaster@your-domain.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体步骤自己摸索下,这里就不细说了。&lt;/p&gt;
&lt;p&gt;如果有自己的企业邮箱，也是可以使用的，但是一定要添加上面格式的邮箱账户才可收邮件，谨记！&lt;/p&gt;
&lt;p&gt;QQ企业邮箱地址：&lt;a href=&quot;https://exmail.qq.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://exmail.qq.com&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;准备CSR-文件&quot;&gt;&lt;a href=&quot;#准备CSR-文件&quot; class=&quot;headerlink&quot; title=&quot;准备CSR 文件&quot;&gt;&lt;/a&gt;准备CSR 文件&lt;/h5&gt;&lt;p&gt;AlphaSSL 证书的申请，需要先提交域名的 CSR（证书请求文件），然后用域名邮箱作验证，保证你是这个域名的所有者。CSR 很好生成，可以用 openssl 在本地生成，也可以去各大工具网站在线生成。&lt;br&gt;
    
    </summary>
    
      <category term="ngrok" scheme="http://blog.sharkyzh.cn/categories/ngrok/"/>
    
    
      <category term="ngrok" scheme="http://blog.sharkyzh.cn/tags/ngrok/"/>
    
      <category term="https" scheme="http://blog.sharkyzh.cn/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>WebApi接口参数传参详解</title>
    <link href="http://blog.sharkyzh.cn/post/fcb54dee.html"/>
    <id>http://blog.sharkyzh.cn/post/fcb54dee.html</id>
    <published>2018-01-12T09:34:42.000Z</published>
    <updated>2020-03-10T10:40:23.597Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、Get请求"><a href="#一、Get请求" class="headerlink" title="一、Get请求"></a>一、Get请求</h4><h5 id="基础类型参数"><a href="#基础类型参数" class="headerlink" title="基础类型参数"></a>基础类型参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[HttpGet]</span><br><span class="line">public string GetAllChargingData(int id, string name)</span><br><span class="line">&#123;</span><br><span class="line">    return &quot;ChargingData&quot; + id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;get&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/GetAllChargingData&quot;,</span><br><span class="line">    data: &#123; id: 1, name: &quot;Jim&quot;, bir: &quot;1988-09-11&quot;&#125;,</span><br><span class="line">    success: function (data, status) &#123;</span><br><span class="line">        if (status == &quot;success&quot;) &#123;</span><br><span class="line">            $(&quot;#div_test&quot;).html(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="实体作为参数"><a href="#实体作为参数" class="headerlink" title="实体作为参数"></a>实体作为参数</h5><p>Get请求的时候可以在参数里面加上[FromUri]即可直接得到对象</p> <a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var postdata = &#123; ID: &quot;1&quot;, NAME: &quot;Jim&quot;, CREATETIME: &quot;1988-09-11&quot; &#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;get&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/GetAllChargingData&quot;,</span><br><span class="line">    data: postdata,</span><br><span class="line">    success: function (data, status) &#123; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[HttpGet]</span><br><span class="line">public string GetAllChargingData([FromUri]TB_CHARGING obj)</span><br><span class="line">&#123;</span><br><span class="line">    return &quot;ChargingData&quot; + obj.ID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想使用[FromUri]这些在参数里面加特性的这种“怪异”写法，也可以采用先序列化，再在后台反序列的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;get&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/GetByModel&quot;,</span><br><span class="line">    contentType: &quot;application/json&quot;,</span><br><span class="line">    data: &#123; strQuery: JSON.stringify(&#123; ID: &quot;1&quot;, NAME: &quot;Jim&quot;, CREATETIME: &quot;1988-09-11&quot; &#125;) &#125;,</span><br><span class="line">    success: function (data, status) &#123;</span><br><span class="line">        if (status == &quot;success&quot;) &#123;</span><br><span class="line">            $(&quot;#div_test&quot;).html(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[HttpGet]</span><br><span class="line">public string GetByModel(string strQuery)</span><br><span class="line">&#123;</span><br><span class="line">    TB_CHARGING oData = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;TB_CHARGING&gt;(strQuery);</span><br><span class="line">    return &quot;ChargingData&quot; + oData.ID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组作为参数"><a href="#数组作为参数" class="headerlink" title="数组作为参数"></a>数组作为参数</h5><p>一般get请求不建议将数组作为参数，因为我们知道get请求传递参数的大小是有限制的，最大1024字节，数组里面内容较多时，将其作为参数传递可能会发生参数超限丢失的情况。</p><h5 id="“怪异”的get请求-其实是RESETful风格API方法名"><a href="#“怪异”的get请求-其实是RESETful风格API方法名" class="headerlink" title="“怪异”的get请求(其实是RESETful风格API方法名)"></a>“怪异”的get请求(其实是RESETful风格API方法名)</h5><p>方法名以Get开头，WebApi会自动默认这个请求就是get请求，而如果你以其他名称开头而又不标注方法的请求方式，那么这个时候服务器虽然找到了这个方法，但是由于请求方式不确定，所以直接返回给你405——方法不被允许的错误。</p><p>最后结论：所有的WebApi方法最好是加上请求的方式（[HttpGet]/[HttpPost]/[HttpPut]/[HttpDelete]），不要偷懒，这样既能防止类似的错误，也有利于方法的维护，别人一看就知道这个方法是什么请求。</p><hr><h4 id="二、Post请求"><a href="#二、Post请求" class="headerlink" title="二、Post请求"></a>二、Post请求</h4><h5 id="基础类型参数-1"><a href="#基础类型参数-1" class="headerlink" title="基础类型参数"></a>基础类型参数</h5><h6 id="传递多个基础类型的数据"><a href="#传递多个基础类型的数据" class="headerlink" title="传递多个基础类型的数据"></a>传递多个基础类型的数据</h6><p> post请求的基础类型的参数和get请求有点不一样，我们知道get请求的参数是通过url来传递的，而post请求则是通过http的请求体中传过来的，WebApi的post请求也需要从http的请求体里面去取参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;post&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/SaveData&quot;,</span><br><span class="line">    data: &#123; &quot;&quot;: &quot;Jim&quot; &#125;,</span><br><span class="line">    success: function (data, status) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[HttpPost]</span><br><span class="line">public bool SaveData([FromBody]string NAME)</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FromBody和我们一般通过url取参数的机制则不同，它的机制是=value，没有key的概念，并且如果你写了key(比如你的ajax参数写的{NAME:”Jim”})，后台反而得到的NAME等于null。不信你可以试试。</p><h6 id="传递多个基础类型的数据-1"><a href="#传递多个基础类型的数据-1" class="headerlink" title="传递多个基础类型的数据"></a>传递多个基础类型的数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;post&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/SaveData&quot;,</span><br><span class="line">    contentType: &apos;application/json&apos;,</span><br><span class="line">    data: JSON.stringify(&#123; NAME: &quot;Jim&quot;,DES:&quot;备注&quot; &#125;),</span><br><span class="line">    success: function (data, status) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[HttpPost]</span><br><span class="line">public object SaveData(dynamic obj)</span><br><span class="line">&#123;</span><br><span class="line">    var strName = Convert.ToString(obj.NAME);</span><br><span class="line">    return strName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过dynamic动态类型能顺利得到多个参数，省掉了[FromBody]这个累赘，并且ajax参数的传递不用使用”无厘头”的{“”:”value”}这种写法，有没有一种小清新的感觉~~有一点需要注意的是这里在ajax的请求里面需要加上参数类型为Json，即 <strong>contentType: ‘application/json’</strong>, 这个属性。</p><h5 id="实体作为参数-1"><a href="#实体作为参数-1" class="headerlink" title="实体作为参数"></a>实体作为参数</h5><h6 id="单个实体作为参数"><a href="#单个实体作为参数" class="headerlink" title="单个实体作为参数"></a>单个实体作为参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;post&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/SaveData&quot;,</span><br><span class="line">    data: &#123; ID: &quot;1&quot;, NAME: &quot;Jim&quot;, CREATETIME: &quot;1988-09-11&quot; &#125;,</span><br><span class="line">    success: function (data, status) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">[HttpPost]</span><br><span class="line">public bool SaveData(TB_CHARGING oData)</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理解释：使用实体作为参数的时候，前端直接传递普通json，后台直接使用对应的类型去接收即可，不用FromBody。但是这里需要注意的一点就是，这里不能指定contentType为appplication/json，否则，参数无法传递到后台。</p><p>post请求默认是将表单里面的数据的key/value形式发送到服务，而我们的服务器只需要有对应的key/value属性值的对象就可以接收到。而如果使用application/json，则表示将前端的数据以序列化过的json传递到后端，后端要把它变成实体对象，还需要一个反序列化的过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var postdata = &#123; ID: &quot;1&quot;, NAME: &quot;Jim&quot;, CREATETIME: &quot;1988-09-11&quot; &#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;post&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/SaveData&quot;,</span><br><span class="line">    contentType: &apos;application/json&apos;,</span><br><span class="line">    data: JSON.stringify(postdata),</span><br><span class="line">    success: function (data, status) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[HttpPost]</span><br><span class="line">public bool SaveData(TB_CHARGING lstCharging)</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果指定了contentType为application/json，则必须要传递序列化过的对象；如果使用post请求的默认参数类型，则前端直接传递json类型的对象即可。</strong></p><h6 id="实体和基础类型一起作为参数传递"><a href="#实体和基础类型一起作为参数传递" class="headerlink" title="实体和基础类型一起作为参数传递"></a>实体和基础类型一起作为参数传递</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var postdata = &#123; ID: &quot;1&quot;, NAME: &quot;Jim&quot;, CREATETIME: &quot;1988-09-11&quot; &#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;post&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/SaveData&quot;,</span><br><span class="line">    contentType: &apos;application/json&apos;,</span><br><span class="line">    data: JSON.stringify(&#123; NAME:&quot;Lilei&quot;, Charging:postdata &#125;),</span><br><span class="line">    success: function (data, status) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[HttpPost]</span><br><span class="line">public object SaveData(dynamic obj)</span><br><span class="line">&#123;</span><br><span class="line">    var strName = Convert.ToString(obj.NAME);</span><br><span class="line">    var oCharging = Newtonsoft.Json.JsonConvert.DeserializeObject&lt;TB_CHARGING&gt;(Convert.ToString(obj.Charging));</span><br><span class="line">    return strName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="数组作为参数-1"><a href="#数组作为参数-1" class="headerlink" title="数组作为参数"></a>数组作为参数</h6><p><strong>（1）基础类型数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;];</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;post&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/SaveData&quot;,</span><br><span class="line">    contentType: &apos;application/json&apos;,</span><br><span class="line">    data: JSON.stringify(arr),</span><br><span class="line">    success: function (data, status) &#123; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">[HttpPost]</span><br><span class="line">public bool SaveData(string[] ids)</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）实体集合</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var arr = [</span><br><span class="line">    &#123; ID: &quot;1&quot;, NAME: &quot;Jim&quot;, CREATETIME: &quot;1988-09-11&quot; &#125;,</span><br><span class="line">    &#123; ID: &quot;2&quot;, NAME: &quot;Lilei&quot;, CREATETIME: &quot;1990-12-11&quot; &#125;,</span><br><span class="line">    &#123; ID: &quot;3&quot;, NAME: &quot;Lucy&quot;, CREATETIME: &quot;1986-01-10&quot; &#125;</span><br><span class="line">];</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &quot;post&quot;,</span><br><span class="line">    url: &quot;http://localhost:27221/api/Charging/SaveData&quot;,</span><br><span class="line">    contentType: &apos;application/json&apos;,</span><br><span class="line">    data: JSON.stringify(arr),</span><br><span class="line">    success: function (data, status) &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[HttpPost]</span><br><span class="line">public bool SaveData(List&lt;TB_CHARGING&gt; lstCharging)</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="后台发送请求参数的传递"><a href="#后台发送请求参数的传递" class="headerlink" title="后台发送请求参数的传递"></a>后台发送请求参数的传递</h6><p>如果我们通过后台去发送请求是否也是可行的呢？我们以实体对象作为参数来传递写写代码试一把。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public void TestReques()</span><br><span class="line">&#123;</span><br><span class="line">　　　　 //请求路径</span><br><span class="line">    string url = &quot;http://localhost:27221/api/Charging/SaveData&quot;;</span><br><span class="line"></span><br><span class="line">    //定义request并设置request的路径</span><br><span class="line">    WebRequest request = WebRequest.Create(url);</span><br><span class="line">    request.Method = &quot;post&quot;;</span><br><span class="line"></span><br><span class="line">    //初始化request参数</span><br><span class="line">    string postData = &quot;&#123; ID: \&quot;1\&quot;, NAME: \&quot;Jim\&quot;, CREATETIME: \&quot;1988-09-11\&quot; &#125;&quot;;</span><br><span class="line"></span><br><span class="line">    //设置参数的编码格式，解决中文乱码</span><br><span class="line">    byte[] byteArray = Encoding.UTF8.GetBytes(postData);</span><br><span class="line"></span><br><span class="line">    //设置request的MIME类型及内容长度</span><br><span class="line">    request.ContentType = &quot;application/json&quot;;</span><br><span class="line">    request.ContentLength = byteArray.Length;</span><br><span class="line"></span><br><span class="line">    //打开request字符流</span><br><span class="line">    Stream dataStream = request.GetRequestStream();</span><br><span class="line">    dataStream.Write(byteArray, 0, byteArray.Length);</span><br><span class="line">    dataStream.Close();</span><br><span class="line"></span><br><span class="line">    //定义response为前面的request响应</span><br><span class="line">    WebResponse response = request.GetResponse();</span><br><span class="line"></span><br><span class="line">    //获取相应的状态代码</span><br><span class="line">    Console.WriteLine(((HttpWebResponse)response).StatusDescription);</span><br><span class="line"></span><br><span class="line">    //定义response字符流</span><br><span class="line">    dataStream = response.GetResponseStream();</span><br><span class="line">    StreamReader reader = new StreamReader(dataStream);</span><br><span class="line">    string responseFromServer = reader.ReadToEnd();//读取所有</span><br><span class="line">    Console.WriteLine(responseFromServer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>本文出处：博客园 懒得安分 <a href="http://www.cnblogs.com/landeanfen/" target="_blank" rel="noopener"> http://www.cnblogs.com/landeanfen/</a></p></blockquote><p>本博客只对原文进行了摘要与抄录，若有侵权，请告知！</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、Get请求&quot;&gt;&lt;a href=&quot;#一、Get请求&quot; class=&quot;headerlink&quot; title=&quot;一、Get请求&quot;&gt;&lt;/a&gt;一、Get请求&lt;/h4&gt;&lt;h5 id=&quot;基础类型参数&quot;&gt;&lt;a href=&quot;#基础类型参数&quot; class=&quot;headerlink&quot; title=&quot;基础类型参数&quot;&gt;&lt;/a&gt;基础类型参数&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[HttpGet]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public string GetAllChargingData(int id, string name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;ChargingData&amp;quot; + id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: &amp;quot;get&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &amp;quot;http://localhost:27221/api/Charging/GetAllChargingData&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123; id: 1, name: &amp;quot;Jim&amp;quot;, bir: &amp;quot;1988-09-11&amp;quot;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    success: function (data, status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (status == &amp;quot;success&amp;quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&amp;quot;#div_test&amp;quot;).html(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;实体作为参数&quot;&gt;&lt;a href=&quot;#实体作为参数&quot; class=&quot;headerlink&quot; title=&quot;实体作为参数&quot;&gt;&lt;/a&gt;实体作为参数&lt;/h5&gt;&lt;p&gt;Get请求的时候可以在参数里面加上[FromUri]即可直接得到对象&lt;/p&gt;
    
    </summary>
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/categories/net/"/>
    
      <category term="webapi" scheme="http://blog.sharkyzh.cn/categories/net/webapi/"/>
    
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/tags/net/"/>
    
      <category term="webapi" scheme="http://blog.sharkyzh.cn/tags/webapi/"/>
    
  </entry>
  
  <entry>
    <title>微信内调试小工具vConsole</title>
    <link href="http://blog.sharkyzh.cn/post/c295aa6a.html"/>
    <id>http://blog.sharkyzh.cn/post/c295aa6a.html</id>
    <published>2018-01-11T04:14:50.000Z</published>
    <updated>2020-03-10T10:40:23.602Z</updated>
    
    <content type="html"><![CDATA[<p>vConsole是腾讯出的一个轻量、可拓展、针对手机网页的前端开发者调试面板。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ol><li>查看 console 日志</li><li>查看网络请求</li><li>查看页面 element 结构</li><li>查看 Cookies 和 localStorage</li><li>手动执行 JS 命令行</li><li>自定义插件</li></ol><h4 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h4><p>下载 vConsole 的最新版本。（不要直接下载 dev 分支下的 dist/vconsole.min.js）</p><p>或者使用 npm 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vconsole</span><br></pre></td></tr></table></figure> <a id="more"></a><p>引入 dist/vconsole.min.js 到项目中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;path/to/vconsole.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 初始化</span><br><span class="line">  var vConsole = new VConsole();</span><br><span class="line">  console.log(&apos;Hello world&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h5 id="初始化-amp-配置"><a href="#初始化-amp-配置" class="headerlink" title="初始化 &amp; 配置"></a>初始化 &amp; 配置</h5><p>引入后, 需要手动初始化 vConsole：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var vConsole = new VConsole(option);</span><br></pre></td></tr></table></figure><p>option 是一个选填的 object 对象，具体配置定义请参阅 <a href="https://github.com/Tencent/vConsole/blob/dev/doc/public_properties_methods_CN.md" target="_blank" rel="noopener">公共属性及方法</a>。</p><p>使用 setOption() 来更新 option：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vConsole.setOption(&apos;maxLogNumber&apos;, 5000);</span><br><span class="line">// 或者：</span><br><span class="line">vConsole.setOption(&#123;maxLogNumber: 5000&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 打印日志</span><br><span class="line"></span><br><span class="line">与 PC 端打印 log 一致，可直接使用 `console.log()` 等方法直接打印日志：</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">console.log(&apos;Hello World&apos;);</span><br></pre></td></tr></table></figure><p>未加载 vConsole 模块时，console.log() 会直接打印到原生控制台中；加载 vConsole 后，日志会打印到页面前端+原生控制台。</p><h5 id="日志类型"><a href="#日志类型" class="headerlink" title="日志类型"></a>日志类型</h5><p>支持 5 种不同类型的日志，会以不同的颜色输出到前端面板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;foo&apos;);   // 白底黑字</span><br><span class="line">console.info(&apos;bar&apos;);  // 白底紫字</span><br><span class="line">console.debug(&apos;oh&apos;);  // 白底黄字</span><br><span class="line">console.warn(&apos;foo&apos;);  // 黄底黄字</span><br><span class="line">console.error(&apos;bar&apos;); // 红底红字</span><br></pre></td></tr></table></figure><h5 id="Object-Array-结构化展示"><a href="#Object-Array-结构化展示" class="headerlink" title="Object/Array 结构化展示"></a>Object/Array 结构化展示</h5><p>支持打印 Object 或 Array 变量，会以结构化 JSON 形式输出（并折叠）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">obj.foo = &apos;bar&apos;;</span><br><span class="line">console.log(obj);</span><br><span class="line">/*</span><br><span class="line">Object</span><br><span class="line">&#123;</span><br><span class="line">  foo: &quot;bar&quot;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>支持传入多个参数，会以空格隔开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var uid = 233;</span><br><span class="line">console.log(&apos;UserID:&apos;, uid); // 打印出 UserID: 233</span><br></pre></td></tr></table></figure><h5 id="特殊格式"><a href="#特殊格式" class="headerlink" title="特殊格式"></a>特殊格式</h5><p>支持使用 [system] 作为第一个参数，来将 log 输出到 System 面板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;[system]&apos;, &apos;foo&apos;); // &apos;foo&apos; 会输出到 System 面板</span><br><span class="line">console.log(&apos;[system] bar&apos;); // 这行日志会输出到 Log 面板而非 System 面板</span><br></pre></td></tr></table></figure><h4 id="内置插件"><a href="#内置插件" class="headerlink" title="内置插件"></a>内置插件</h4><p>Network 网络</p><p>所有 XMLHttpRequest 请求都会被显示到 Network tab 中。</p><p>若不希望一个请求显示在面板中，可添加属性 _noVConsole = true 到 XHR 对象中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr._noVConsole = true; // 不会显示到 tab 中</span><br><span class="line">xhr.open(&quot;GET&quot;, &apos;http://example.com/&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><h4 id="文档索引"><a href="#文档索引" class="headerlink" title="文档索引"></a>文档索引</h4><p><a href="https://github.com/Tencent/vConsole/blob/dev/doc/a_doc_index_CN.md" target="_blank" rel="noopener">文档索引</a></p><p>以上部分来源于github，本人只做了抄录。详细可进<a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener">项目</a>查看！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vConsole是腾讯出的一个轻量、可拓展、针对手机网页的前端开发者调试面板。&lt;/p&gt;
&lt;h4 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;查看 console 日志&lt;/li&gt;
&lt;li&gt;查看网络请求&lt;/li&gt;
&lt;li&gt;查看页面 element 结构&lt;/li&gt;
&lt;li&gt;查看 Cookies 和 localStorage&lt;/li&gt;
&lt;li&gt;手动执行 JS 命令行&lt;/li&gt;
&lt;li&gt;自定义插件&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;上手&quot;&gt;&lt;a href=&quot;#上手&quot; class=&quot;headerlink&quot; title=&quot;上手&quot;&gt;&lt;/a&gt;上手&lt;/h4&gt;&lt;p&gt;下载 vConsole 的最新版本。（不要直接下载 dev 分支下的 dist/vconsole.min.js）&lt;/p&gt;
&lt;p&gt;或者使用 npm 安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install vconsole&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="微信" scheme="http://blog.sharkyzh.cn/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="微信" scheme="http://blog.sharkyzh.cn/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>MVC中如何在Views目录下存放css,js,html文件</title>
    <link href="http://blog.sharkyzh.cn/post/e1f81db1.html"/>
    <id>http://blog.sharkyzh.cn/post/e1f81db1.html</id>
    <published>2018-01-11T04:00:00.000Z</published>
    <updated>2020-03-10T10:40:23.593Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>去年做项目的时候，用到换换肤的技术，但是模板放在View目录后，css，js文件不能访问。<br>参考了下博客园的文章，把问题解决了。现在把解决方法总结一下。</p></blockquote><h4 id="如何配置才能访问css，js文件"><a href="#如何配置才能访问css，js文件" class="headerlink" title="如何配置才能访问css，js文件"></a>如何配置才能访问css，js文件</h4><p>默认情况下Views目录下是不能访问除了视图文件之外的文件的<br>在Views目录下的Web.config中添加如下节点信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;  </span><br><span class="line">    &lt;validation validateIntegratedModeConfiguration=&quot;false&quot; /&gt;  </span><br><span class="line">    &lt;handlers&gt;  </span><br><span class="line">        &lt;remove name=&quot;BlockViewHandler&quot;/&gt;  </span><br><span class="line">        &lt;add name=&quot;js&quot; verb=&quot;GET,HEAD&quot; path=&quot;*.css&quot; type=&quot;System.Web.StaticFileHandler&quot; /&gt;  </span><br><span class="line">        &lt;add name=&quot;css&quot; verb=&quot;GET,HEAD&quot; path=&quot;*.css&quot; type=&quot;System.Web.StaticFileHandler&quot; /&gt;  </span><br><span class="line">        &lt;add name=&quot;jpg&quot; verb=&quot;GET,HEAD&quot; path=&quot;*.jpg&quot; type=&quot;System.Web.StaticFileHandler&quot; /&gt;  </span><br><span class="line">        &lt;add name=&quot;png&quot; verb=&quot;GET,HEAD&quot; path=&quot;*.png&quot; type=&quot;System.Web.StaticFileHandler&quot; /&gt;  </span><br><span class="line">        &lt;add name=&quot;js&quot; verb=&quot;GET,HEAD&quot; path=&quot;*.js&quot; type=&quot;System.Web.StaticFileHandler&quot; /&gt;  </span><br><span class="line">        &lt;add name=&quot;BlockViewHandler&quot; path=&quot;*&quot; verb=&quot;*&quot; preCondition=&quot;integratedMode&quot; type=&quot;System.Web.HttpNotFoundHandler&quot; /&gt;  </span><br><span class="line">    &lt;/handlers&gt;  </span><br><span class="line">&lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure><h4 id="如何配置才能访问静态页面"><a href="#如何配置才能访问静态页面" class="headerlink" title="如何配置才能访问静态页面"></a>如何配置才能访问静态页面</h4><p>在Views目录下的Web.config中添加如下节点信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;httpHandlers&gt;  </span><br><span class="line">  &lt;add verb=&quot;GET,HEAD&quot; path=&quot;*.html&quot; type=&quot;System.Web.StaticFileHandler&quot;/&gt;  </span><br><span class="line">  &lt;add path=&quot;*&quot; verb=&quot;*&quot; type=&quot;System.Web.HttpNotFoundHandler&quot;/&gt;  </span><br><span class="line">&lt;/httpHandlers&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;去年做项目的时候，用到换换肤的技术，但是模板放在View目录后，css，js文件不能访问。&lt;br&gt;参考了下博客园的文章，把问题解决了。现在把解决方法总结一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;如何配置才能访问css，js文件&quot;&gt;
      
    
    </summary>
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/categories/net/"/>
    
      <category term="mvc" scheme="http://blog.sharkyzh.cn/categories/net/mvc/"/>
    
    
      <category term=".net" scheme="http://blog.sharkyzh.cn/tags/net/"/>
    
      <category term="mvc" scheme="http://blog.sharkyzh.cn/tags/mvc/"/>
    
  </entry>
  
</feed>
